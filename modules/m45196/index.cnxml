<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Jb0230: Java OOP: Flow of Control</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m45196</md:content-id>
  <md:title>Jb0230: Java OOP: Flow of Control</md:title>
  <md:abstract>Java supports several different statements designed to alter or control the logical flow of the program. This module explores those statements.</md:abstract>
  <md:uuid>bb58efc4-acbe-4d15-876e-5f109df35856</md:uuid>
</metadata>

<content>






<para id="p1000">
Revised: Mon Mar 28 15:04:52 CDT 2016

</para>




<para id="p1001">
<emphasis id="em1000" effect="italics">
This page is included in the following Books:

</emphasis>
</para>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">

	

<link id="a1000" url="http://cnx.org/contents/EHRr6hjR:pDHzTeQb">


<emphasis id="em1001" effect="italics">
Programming Fundamentals with Java 
	

</emphasis>
 
	

</link>


</item>


	

<item id="li1001">
<link id="a1001" url="http://cnx.org/contents/-2RmHFs_:kFS-maG_">


<emphasis id="em1002" effect="italics">
Object-Oriented Programming (OOP) with Java 
	

</emphasis>
 
	

</link>

 

</item>




</list>













<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1001" list-type="bulleted">

	

<item id="li1002">
<link id="a1002" target-id="Preface">

Preface

</link>


<list id="ul1002" list-type="bulleted">

		

<item id="li1003">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1003" list-type="bulleted">

			

<item id="li1004">
<link id="a1004" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1005">
<link id="a1005" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1006">


	

<link id="a1006" target-id="Introduction">

Introduction

</link>


<list id="ul1004" list-type="bulleted">

		

<item id="li1007">


		

<link id="a1007" target-id="flowofcontrol">

Flow of control

</link>


</item>


		

<item id="li1008">


		

<link id="a1008" target-id="thewhilestatement">

The while statement

</link>


</item>


		

<item id="li1009">


		

<link id="a1009" target-id="theifelsestatement">

The if-else statement

</link>


</item>


		

<item id="li1010">


		

<link id="a1010" target-id="theswitchcasestatement">

The switch-case statement

</link>


</item>


		

<item id="li1011">




<link id="a1011" target-id="theforloop">

The for 
loop

</link>


</item>


		

<item id="li1012">
<link id="a1012" target-id="The_for_each_loop">

The for-each loop

</link>


</item>


		

<item id="li1013">


		

<link id="a1013" target-id="thedowhileloop">

The do-while loop

</link>


</item>


		

<item id="li1014">


		

<link id="a1014" target-id="thebreakandcontinuestatements">

The break and continue statements

</link>


</item>


		

<item id="li1015">


		

<link id="a1015" target-id="unlabeledbreakandcontinue">

Unlabeled break and continue

</link>


</item>


		

<item id="li1016">


		

<link id="a1016" target-id="labeledbreakandcontinue">

Labeled break and continue statements

</link>


<list id="ul1005" list-type="bulleted">

	

<item id="li1017">


		

<link id="a1017" target-id="labeledbreakstatements">

Labeled break statements

</link>


</item>


	

<item id="li1018">


		

<link id="a1018" target-id="labeledcontinuestatements">

Labeled continue statements

</link>


</item>




</list>


		

</item>


		

<item id="li1019">


		

<link id="a1019" target-id="thereturnstatement">

The return statement

</link>


</item>


		

<item id="li1020">


		

<link id="a1020" target-id="exceptionhandling">

Exception handling

</link>


</item>


	

</list>


	

</item>


	

<item id="li1021">
<link id="a1021" target-id="Looking_ahead">

Looking ahead

</link>


</item>


	

<item id="li1022">
<link id="a1022" target-id="Miscellaneous">

Miscellaneous

</link>


</item>




</list>


	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	

<para id="p1002">
Java supports several different statements designed to alter or control the logical flow of the program. 
	This module explores those statements. 

</para>



	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1003">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the Figures 
and Listings while you are reading about them.

</para>



	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1006" list-type="bulleted">

		

<item id="li1023">
<link id="a1023" target-id="Figure_1">

Figure 1

</link>

. Statements that support flow of control.

</item>


		

<item id="li1024">
<link id="a1024" target-id="Figure_2">

Figure 2

</link>

. Syntax of a while statement. 

</item>


		

<item id="li1025">
<link id="a1025" target-id="Figure_3">

Figure 3

</link>

. Syntax of an if-else statement.

</item>


		

<item id="li1026">
<link id="a1026" target-id="Figure_4">

Figure 4

</link>

. Syntax of a switch-case statement.

</item>


		

<item id="li1027">
<link id="a1027" target-id="Figure_5">

Figure 5

</link>

. Syntax of a for loop.

</item>


		

<item id="li1028">
<link id="a1028" target-id="Figure_6">

Figure 6

</link>

. Syntax of a do-while loop. 

</item>


		

<item id="li1029">
<link id="a1029" target-id="Figure_7">

Figure 7

</link>

. Syntax of a labeled statement. 

</item>


		

<item id="li1030">
<link id="a1030" target-id="Figure_8">

Figure 8

</link>

. An empty return statement. 

</item>


		

<item id="li1031">
<link id="a1031" target-id="Figure_9">

Figure 9

</link>

. Returning a value from a method. 

</item>



	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1007" list-type="bulleted">

		

<item id="li1032">
<link id="a1032" target-id="Listing_1">

Listing 1

</link>

. Sample Java while statement. 

</item>


		

<item id="li1033">
<link id="a1033" target-id="Listing_2">

Listing 2

</link>

. A program that won't compile. 

</item>


		

<item id="li1034">
<link id="a1034" target-id="Listing_3">

Listing 3

</link>

. Another program that won't compile. 

</item>


		

<item id="li1035">
<link id="a1035" target-id="Listing_4">

Listing 4

</link>

. A program that will compile. 

</item>


		

<item id="li1036">
<link id="a1036" target-id="Listing_5">

Listing 5

</link>

. Another program that will compile.

</item>


		

<item id="li1037">
<link id="a1037" target-id="Listing_6">

Listing 6

</link>

. The program named switch1.java.

</item>


		

<item id="li1038">
<link id="a1038" target-id="Listing_7">

Listing 7

</link>

. The program named switch2.java.

</item>


	

</list>




</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Introduction" effect="bold">

Introduction

</emphasis>


</title>




<para id="p1004">
<emphasis id="strong1000" effect="bold">
The first step

</emphasis>
</para>





<para id="p1005">
The first step in learning to use a new programming language is usually to 
learn the foundation concepts such as variables, types, expressions, 
flow-of-control, etc. This module concentrates on 

<emphasis id="em1003" effect="italics">
flow-of-control

</emphasis>
.

</para>





</section>
<section id="h11003">
<title>
<emphasis id="flowofcontrol" effect="bold">

Flow of 
control

</emphasis>


</title>




<para id="p1006">
<emphasis id="strong1001" effect="bold">
What is flow of control?

</emphasis>
</para>





<para id="p1007">
Java supports several different kinds of 
statements designed to alter or control the logical flow of the program. 

</para>





<para id="p1008">
The ability to alter the logical flow of the program is often referred to as 


<emphasis id="em1004" effect="italics">
Flow of Control

</emphasis>
.

</para>





<para id="p1009">
<emphasis id="strong1002" effect="bold">
Statements that support flow of 
control

</emphasis>
</para>





<para id="p1010">
<link id="a1039" target-id="Figure_1">

Figure 1

</link>

 lists the statements supported by Java 
for controlling the logical flow of the 
program. 

</para>










	

<table id="table1000" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Figure_1" effect="bold">

Figure 1

</emphasis>

. Statements that support flow of control.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">



<code id="pre1000" display="block">
Statement            Type

if-else              selection
switch-case          selection
for                  loop
for-each             loop
while                loop
do-while             loop
try-catch-finally    exception handling
throw                exception handling
break                miscellaneous
continue             miscellaneous
label:               miscellaneous
return               miscellaneous
goto                 reserved by Java but not supported
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>






<section id="h21001">
<title>
<emphasis id="thewhilestatement" effect="bold">

The 
while statement

</emphasis>


</title>




<para id="p1011">
We've seen the 

<emphasis id="strong1003" effect="bold">
while

</emphasis>
 
statement in earlier modules. Several of the programs in earlier modules contained a 


<emphasis id="strong1004" effect="bold">
while

</emphasis>
 
statement designed to control the logical flow of the program. 

</para>






<para id="p1012">
<emphasis id="strong1005" effect="bold">
Syntax of a while statement

</emphasis>
</para>





<para id="p1013">
The general syntax of a 

<emphasis id="strong1006" effect="bold">
while

</emphasis>
 
statement is shown in 

<link id="a1040" target-id="Figure_2">

Figure 2

</link>

.

</para>




	

<table id="table1001" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Figure_2" effect="bold">

Figure 2

</emphasis>

. Syntax of a while 
				statement.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">



<code id="pre1001" display="block">
while (conditional expression)
  statement or compound statement;
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>





<para id="p1014">
<emphasis id="strong1007" effect="bold">
Behavior of a while statement

</emphasis>
</para>





<para id="p1015">
The 

<emphasis id="three_pillars" effect="bold">

three pillars

</emphasis>

 of procedural programming are

</para>





<list id="ul1008" list-type="bulleted">

	

<item id="li1039">
sequence

</item>


	

<item id="li1040">
selection

</item>


	

<item id="li1041">
loop

</item>




</list>




<para id="p1016">
The 

<emphasis id="strong1008" effect="bold">
while

</emphasis>
 statement is commonly used to create a loop 
structure, often referred to as a 

<emphasis id="em1005" effect="italics">
while loop

</emphasis>
.

</para>





<para id="p1017">
Once the 

<emphasis id="strong1009" effect="bold">
while

</emphasis>
 statement is encountered in the sequence of 
code, the program will continue to execute 
the statement or compound statement shown in 

<link id="a1041" target-id="Figure_2">

Figure 2

</link>

 for as long as the conditional expression 
evaluates to true. 

<emphasis id="em1006" effect="italics">
(Note that a compound statement is created by enclosing 
two or more statements inside a pair of matching curly brackets, thus creating a 
block of code as the body of the 

<emphasis id="strong1010" effect="bold">
while

</emphasis>
 statement or loop.)

</emphasis>
</para>





<para id="p1018">
<emphasis id="strong1011" effect="bold">
Sample Java 

<emphasis id="em1007" effect="italics">
while

</emphasis>
 statement

</emphasis>
</para>





<para id="p1019">
The 

<emphasis id="strong1012" effect="bold">
while

</emphasis>
 statement shown in 

<link id="a1042" target-id="Listing_1">

Listing 1

</link>

 was extracted from a 
Java program in an earlier module.

</para>




	

<table id="table1002" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. Sample Java while 
				statement.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">



<code id="pre1002" display="block">
while( (ch1 = System.in.read() ) != '#') 
  ch2 = ch1;
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>





<para id="p1020">
<emphasis id="strong1013" effect="bold">
The 

<emphasis id="em1008" effect="italics">
in

</emphasis>
 variable of the 

<emphasis id="em1009" effect="italics">
System

</emphasis>
 class

</emphasis>
</para>





<para id="p1021">
The 

<emphasis id="strong1014" effect="bold">
System

</emphasis>
 class defines a 

<emphasis id="em1010" effect="italics">
class

</emphasis>
 variable named 


<emphasis id="strong1015" effect="bold">
in

</emphasis>
. Because it is a 

<emphasis id="em1011" effect="italics">
class

</emphasis>
 variable, it can be accessed using the name 
of the 

<emphasis id="strong1016" effect="bold">
System

</emphasis>
 class without the requirement to instantiate an object of 
the 

<emphasis id="strong1017" effect="bold">
System

</emphasis>
 class. 

</para>





<para id="p1022">
<emphasis id="strong1018" effect="bold">
What the 

<emphasis id="em1012" effect="italics">
in

</emphasis>
 variable contains

</emphasis>
</para>





<para id="p1023">
The 

<emphasis id="strong1019" effect="bold">
in

</emphasis>
 variable refers to an instance of a class that 
provides a 

<emphasis id="strong1020" effect="bold">
read

</emphasis>
 method that returns a character from the standard 
input device 

<emphasis id="em1013" effect="italics">
(typically the keyboard)

</emphasis>
. 

</para>





<para id="p1024">
Therefore, the expression 

<emphasis id="strong1021" effect="bold">
System.in.read()

</emphasis>
 in


<link id="a1043" target-id="Listing_1">

Listing 1

</link>

 constitutes a call 
to the 

<emphasis id="strong1022" effect="bold">
read

</emphasis>
 method of the object referred to by the 

<emphasis id="strong1023" effect="bold">
in

</emphasis>
 variable of 
the 

<emphasis id="strong1024" effect="bold">
System

</emphasis>
 class. 

</para>





<para id="p1025">
<emphasis id="strong1025" effect="bold">
A 

<emphasis id="em1014" effect="italics">
while

</emphasis>
 loop is an entry condition 
loop

</emphasis>
</para>





<para id="p1026">
The 

<emphasis id="strong1026" effect="bold">
while

</emphasis>
 statement is used to form an 


<emphasis id="em1015" effect="italics">
entry condition

</emphasis>
 loop. The significance of an entry condition loop is 
that the conditional expression is tested before the statements in the loop are 
executed. If it tests false initially, the statements in the loop are never 
executed.

</para>





<para id="p1027">
The 

<emphasis id="strong1027" effect="bold">
while

</emphasis>
 loop shown in 

<link id="a1044" target-id="Listing_1">

Listing 1

</link>

 
will continue reading characters from the keyboard for as long as the character 
entered is not the # character. 

<emphasis id="em1016" effect="italics">
(Recall the not equal (!=) operator from an 
earlier module.)

</emphasis>
</para>






</section>
<section id="h21002">
<title>
<emphasis id="theifelsestatement" effect="bold">

The 
if-else statement

</emphasis>


</title>




<para id="p1028">
The general syntax of an 

<emphasis id="strong1028" effect="bold">
if-else

</emphasis>
 statement is shown in


<link id="a1045" target-id="Figure_3">

Figure 3

</link>

.

</para>




	

<table id="table1003" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Figure_3" effect="bold">

Figure 3

</emphasis>

. Syntax of an if-else statement.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">



<code id="pre1003" display="block">
if(conditional expression)
  statement or compound statement;
else //optional
  statement or compound statement; //optional
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>


	

<para id="p1029">
The 

<emphasis id="strong1029" effect="bold">
if-else

</emphasis>
 statement is the most basic of the statements used to control the logical flow 
	of a Java program. It is used to satisfy the 

<emphasis id="em1017" effect="italics">
selection

</emphasis>
 pillar 
	mentioned 

<link id="a1046" target-id="three_pillars">

earlier

</link>

.

</para>





<para id="p1030">
This statement will execute a specified block of code if some particular 
condition is true, and optionally, will execute a different block of code if the 
condition is not true.

</para>





<para id="p1031">
The 

<emphasis id="strong1030" effect="bold">
else

</emphasis>
 clause shown in


<link id="a1047" target-id="Figure_3">

Figure 3

</link>

 is optional. If it is not provided and the 
condition is not true, control simply passes to the next statement following the


<emphasis id="strong1031" effect="bold">
If

</emphasis>
 statement with none of the code in the body of the 

<emphasis id="strong1032" effect="bold">
if

</emphasis>
 
statement being executed. If the condition is true, the code in the body of the


<emphasis id="strong1033" effect="bold">
if

</emphasis>
 statement is executed.

</para>





<para id="p1032">
If the 

<emphasis id="strong1034" effect="bold">
else

</emphasis>
 clause is provided and the condition is true, 
the code in the body of the 

<emphasis id="strong1035" effect="bold">
if

</emphasis>
 clause is executed and the code in the
body of the


<emphasis id="strong1036" effect="bold">
else

</emphasis>
 clause is ignored.

</para>





<para id="p1033">
If the 

<emphasis id="strong1037" effect="bold">
else

</emphasis>
 clause is provided and the condition is false, 
the code in the body of the 

<emphasis id="strong1038" effect="bold">
if

</emphasis>
 clause is ignored and the code in the
body of the


<emphasis id="strong1039" effect="bold">
else

</emphasis>
 clause is executed.

</para>





<para id="p1034">
In all cases, control passes to the next statement following the 

<emphasis id="strong1040" effect="bold">

if-else

</emphasis>
 statement when the code in the 

<emphasis id="strong1041" effect="bold">
if-else

</emphasis>
 
statement has finished executing. In other words, this is not a loop structure.

</para>





</section>
<section id="h21003">
<title>
<emphasis id="theswitchcasestatement" effect="bold">

The switch-case statement

</emphasis>


</title>




<para id="p1035">
The 

<emphasis id="strong1042" effect="bold">
switch-case

</emphasis>
 statement is another implementation of the


<emphasis id="em1018" effect="italics">
selection

</emphasis>
 pillar mentioned


<link id="a1048" target-id="three_pillars">

earlier

</link>

. The general syntax of a 


<emphasis id="strong1043" effect="bold">
switch-case

</emphasis>
 statement is shown in 

<link id="a1049" target-id="Figure_4">

Figure 4

</link>

.

</para>




	

<table id="table1004" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Figure_4" effect="bold">

Figure 4

</emphasis>

. Syntax of a switch-case statement.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">



<code id="pre1004" display="block">
switch(expression){
  case constant:
    //sequence of optional statements
    break; //optional
  case constant:
    //sequence of optional statements
    break; //optional
.
.
.
  default //optional
    //sequence of optional statements
}
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>


	

<para id="p1036">
<emphasis id="strong1044" effect="bold">
The type of the 

<emphasis id="em1019" effect="italics">
expression

</emphasis>
</emphasis>
</para>





<para id="p1037">
According to the book, 

<emphasis id="em1020" effect="italics">
Java Language Reference

</emphasis>
, by Mark 
Grand, the expression shown in the first line in 

<link id="a1050" target-id="Figure_4">

Figure 4

</link>

 must be 
of type 

<emphasis id="strong1045" effect="bold">
byte

</emphasis>
, 

<emphasis id="strong1046" effect="bold">
char

</emphasis>
, 

<emphasis id="strong1047" effect="bold">
short

</emphasis>
, or 


<emphasis id="strong1048" effect="bold">
int

</emphasis>
. 

</para>





<para id="p1038">
<emphasis id="strong1049" effect="bold">
The behavior of the switch-case statement

</emphasis>
</para>





<para id="p1039">
The expression is tested against a series of 

<emphasis id="em1021" effect="italics">
case

</emphasis>
 constants 
of the same type as the expression. If a match 
is found, the sequence of optional statements associated with that 

<emphasis id="em1022" effect="italics">
case

</emphasis>
 is executed. 

</para>





<para id="p1040">
Execution of statements continues until the optional 

<emphasis id="strong1050" effect="bold">
break

</emphasis>
 is 
encountered. When 

<emphasis id="strong1051" effect="bold">
break

</emphasis>
 is encountered, execution of the switch 
statement is terminated and control passes to the next statement following 
the switch statement.

</para>





<para id="p1041">
If there is no 

<emphasis id="strong1052" effect="bold">
break

</emphasis>
 statement, all of the statements 
following the matching case will be executed including those in cases further 
down the page.

</para>





<para id="p1042">
<emphasis id="strong1053" effect="bold">
The optional default keyword

</emphasis>
</para>





<para id="p1043">
If no match is found and the optional default keyword 
along with a sequence of optional statements has been provided, those statements 
will be executed. 

</para>





<para id="p1044">
<emphasis id="strong1054" effect="bold">
Labeled break

</emphasis>
</para>





<para id="p1045">
Java also supports labeled break statements. 
This capability can be used to cause Java to exhibit different behavior when 
switch statements are nested. This will be explained more fully in a later 
section on labeled break statements. 

</para>






</section>
<section id="h21004">
<title>
<emphasis id="theforloop" effect="bold">

The for 
loop

</emphasis>


</title>




<para id="p1046">
The 

<emphasis id="strong1055" effect="bold">
for

</emphasis>
 statement is another implementation of the 

<emphasis id="em1023" effect="italics">
loop

</emphasis>
 
pillar mentioned 

<link id="a1051" target-id="three_pillars">

earlier

</link>

.

</para>





<para id="p1047">
<emphasis id="strong1056" effect="bold">
Actions of a 

<emphasis id="em1024" effect="italics">
for loop

</emphasis>
</emphasis>
</para>





<para id="p1048">
The operation of a loop normally involves three actions in 
addition to executing the code in the body of the loop: 

</para>






<list id="ul1009" list-type="bulleted">



<item id="li1042">
Initialize a control variable. 

</item>




<item id="li1043">
Test the control variable in a conditional expression. 

</item>




<item id="li1044">
Update the control variable.

</item>


</list>





<para id="p1049">
<emphasis id="strong1057" effect="bold">
Grouping the actions

</emphasis>
</para>





<para id="p1050">
Java provides the 

<emphasis id="strong1058" effect="bold">
for

</emphasis>
 loop construct that groups these 
three actions in one place.

</para>





<para id="p1051">
<emphasis id="strong1059" effect="bold">
The syntax of a for loop

</emphasis>
</para>





<para id="p1052">
A 

<emphasis id="strong1060" effect="bold">
for

</emphasis>
 loop consists of three clauses separated 
by semicolons as shown in 

<link id="a1052" target-id="Figure_5">

Figure 5

</link>

.

</para>




	

<table id="table1005" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Figure_5" effect="bold">

Figure 5

</emphasis>

. Syntax of a for loop.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">



<code id="pre1005" display="block">
for (first clause; second clause; third clause)
  single or compound statement
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>


	

<para id="p1053">
<emphasis id="strong1061" effect="bold">
Contents of the clauses

</emphasis>
</para>





<para id="p1054">
The first and third clauses can contain one or more 
expressions, separated by the 

<emphasis id="em1025" effect="italics">
comma operator

</emphasis>
. 

</para>





<para id="p1055">
<emphasis id="strong1062" effect="bold">
The 

<emphasis id="em1026" effect="italics">
comma operator

</emphasis>
</emphasis>
</para>





<para id="p1056">
The comma operator guarantees 
that its left operand will be executed before its right operand. 

</para>





<para id="p1057">
<emphasis id="em1027" effect="italics">
(While the comma operator has other uses in C++, this is the only 
use of the comma operator in Java.)

</emphasis>
</para>






<para id="p1058">
<emphasis id="strong1063" effect="bold">
Behavior and purpose of the first 
clause

</emphasis>
</para>





<para id="p1059">
The expressions in the first clause are 
executed only once, at the beginning of the loop. Any legal expression(s) 
may be contained in the first clause, but typically the first clause is used for 
initialization. 

</para>





<para id="p1060">
<emphasis id="strong1064" effect="bold">
Declaring and initializing variables 
in the first clause

</emphasis>
</para>





<para id="p1061">
Variables can be declared and initialized in 
the first clause, and this has an interesting ramification regarding scope that 
will be discussed later. 

</para>





<para id="p1062">
<emphasis id="strong1065" effect="bold">
Behavior of the second clause

</emphasis>
</para>





<para id="p1063">
The second clause consists of a single 
expression that must evaluate to a 

<emphasis id="strong1066" effect="bold">
boolean

</emphasis>
 type with a value 
of true or false. The expression in the second clause must eventually evaluate to false to cause the loop to 
terminate.

</para>





<para id="p1064">
Typically relational expressions or relational and conditional 
expressions are used in the second clause. 

</para>





<para id="p1065">
<emphasis id="strong1067" effect="bold">
When the test is performed

</emphasis>
</para>





<para id="p1066">
The value of the second clause is tested when the statement 
first begins execution, and at the beginning of each iteration thereafter. 
Therefore, just like the 

<emphasis id="strong1068" effect="bold">
while

</emphasis>
 loop, the 

<emphasis id="strong1069" effect="bold">
for

</emphasis>
 loop is an 

<emphasis id="em1028" effect="italics">
entry condition loop

</emphasis>
. 

</para>





<para id="p1067">
<emphasis id="strong1070" effect="bold">
When the third clause is executed

</emphasis>
</para>





<para id="p1068">
Although the third clause appears physically at the top of the loop, it isn't 
executed until the statements in the body of the loop have completed 
execution. 

</para>






<para id="p1069">
This is an important point since this clause is typically used to update the 
control variable, and perhaps other variables as well. 

</para>





<para id="p1070">
<emphasis id="strong1071" effect="bold">
What the third clause can contain

</emphasis>
</para>





<para id="p1071">
Multiple expressions can appear in the third clause, separated 
by the comma operator. Again, those expressions will be executed from 
left to right. If variables are updated in the third clause and used in the body 
of the loop, it is important to understand that they do not get updated until 
the execution of the body is completed. 

</para>





<para id="p1072">
<emphasis id="strong1072" effect="bold">
Declaring a variable in a 

<emphasis id="em1029" effect="italics">
for

</emphasis>
 loop

</emphasis>
</para>





<para id="p1073">
As mentioned earlier, it is allowable to declare 
variables in the first clause of a 

<emphasis id="strong1073" effect="bold">
for

</emphasis>
 loop.

</para>






<para id="p1074">
You can declare a variable with a given name outside 


<emphasis id="em1030" effect="italics">
(prior to)

</emphasis>
 the 

<emphasis id="strong1074" effect="bold">
for

</emphasis>
 loop, or you can declare it inside the 


<emphasis id="strong1075" effect="bold">
for

</emphasis>
 
loop, but not both. 

</para>





<para id="p1075">
If you declare it outside the 

<emphasis id="strong1076" effect="bold">
for

</emphasis>
 loop, you can access it either 
outside or inside the loop. 

</para>





<para id="p1076">
If you declare it inside the loop, you can access it only inside the 
loop. In other words, the scope of variables declared inside a 

<emphasis id="strong1077" effect="bold">
for

</emphasis>
 
loop is limited to the loop. 

</para>





<para id="p1077">
This is illustrated in following sequence of four simple programs. 

</para>





<para id="p1078">
<emphasis id="strong1078" effect="bold">
This program won't compile

</emphasis>
</para>





<para id="p1079">
The Java program shown in 

<link id="a1053" target-id="Listing_2">

Listing 2

</link>

 refuses to compile with a complaint 
that a variable named 

<emphasis id="strong1079" effect="bold">
cnt

</emphasis>
 has already been declared in the method when 
the attempt is made to declare it in the 

<emphasis id="strong1080" effect="bold">
for

</emphasis>
 loop. 

</para>




	

<table id="table1006" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. A program that won't 
				compile.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">



<code id="pre1006" display="block">
/*File for1.java Copyright 1997, R.G.Baldwin
This program will not compile because the variable 
named cnt is declared twice.
********************************************************/
class for1 { //define the controlling class
  public static void main(String[] args){ //main method
    int cnt = 5; //declare local method variable
    System.out.println(
          "Value of method var named cnt is " + cnt);

    for(int cnt = 0; cnt &lt; 2; cnt++)
      System.out.println(
              "Value of loop var named cnt is " + cnt);

    System.out.println(
            "Value of method var named cnt is " + cnt);
  }//end main
}//End controlling class.  Note no semicolon required
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>



	

<para id="p1080">
The program shown in 

<link id="a1054" target-id="Listing_3">

Listing 3

</link>

 also won't compile, but 
for a different reason.

</para>




	

<table id="table1007" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. Another program that 
				won't compile.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">



<code id="pre1007" display="block">
/*File for2.java Copyright 1997, R.G.Baldwin
This program will not compile because the variable 
declared inside the for loop is not accessible 
outside the loop.
********************************************************/
class for2 { //define the controlling class
  public static void main(String[] args){ //main method
 
    for(int cnt = 0; cnt &lt; 2; cnt++)
      System.out.println(
                  "Value of loop var named cnt is " + cnt);

    System.out.println(
                "Value of method var named cnt is " + cnt);
  }//end main
}//End controlling class.  Note no semicolon required
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>





<para id="p1081">
The declaration of the variable named 

<emphasis id="strong1081" effect="bold">
cnt

</emphasis>
, outside the 


<emphasis id="strong1082" effect="bold">
for

</emphasis>
 loop, was removed from 

<link id="a1055" target-id="Listing_3">

Listing 3

</link>

 and the declaration inside the 
loop was allowed to remain. This eliminated the problem of attempting to declare 
the variable twice. 

</para>





<para id="p1082">
However, this program refused to compile because an attempt was made to 
access the variable named 

<emphasis id="strong1083" effect="bold">
cnt

</emphasis>
 outside the 

<emphasis id="strong1084" effect="bold">
for

</emphasis>
 loop. This was not 
allowed because the variable was declared inside the 

<emphasis id="strong1085" effect="bold">
for

</emphasis>
 loop and the 
scope of the variable was limited to the loop. 

</para>





<para id="p1083">
<emphasis id="strong1086" effect="bold">
This program will compile

</emphasis>
</para>





<para id="p1084">
The Java program shown in 

<link id="a1056" target-id="Listing_4">

Listing 4

</link>

 will compile and run because the 
variable named 

<emphasis id="strong1087" effect="bold">
cnt

</emphasis>
 that is declared inside the 

<emphasis id="strong1088" effect="bold">
for

</emphasis>
 loop is 
accessed only inside the 

<emphasis id="strong1089" effect="bold">
for

</emphasis>
 loop. No reference to a variable with the 
same name appears outside the loop. 

</para>




	

<table id="table1008" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1008">

			

<row id="tr1016">

				

<entry id="th1008">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. A program that will 
				compile.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1008">

			

<row id="tr1017">

				

<entry id="td1008">



<code id="pre1008" display="block">
/*File for3.java Copyright 1997, R.G.Baldwin
This program will compile because the variable declared 
inside the for loop is accessed only inside the loop.
**********************************************************/
class for3 { //define the controlling class
  public static void main(String[] args){ //main method
 
    for(int cnt = 0; cnt &lt; 2; cnt++)
      System.out.println(
                  "Value of loop var named cnt is " + cnt);
  }//end main
}//End controlling class.
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




<para id="p1085">
<emphasis id="strong1090" effect="bold">
This program will also compile

</emphasis>
</para>





<para id="p1086">
Similarly, the program shown in 

<link id="a1057" target-id="Listing_5">

Listing 5

</link>

 will compile and run 
because the variable named 

<emphasis id="strong1091" effect="bold">
cnt

</emphasis>
 was declared outside the 

<emphasis id="strong1092" effect="bold">
for

</emphasis>
 loop 
and was not declared inside the 

<emphasis id="strong1093" effect="bold">
for

</emphasis>
 loop. This made it possible to access 
that variable both inside and outside the loop. 

</para>




	

<table id="table1009" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1009">

			

<row id="tr1018">

				

<entry id="th1009">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. Another program that will 
				compile.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1009">

			

<row id="tr1019">

				

<entry id="td1009">



<code id="pre1009" display="block">
/*File for4.java Copyright 1997, R.G.Baldwin
This program will compile and run because the variable 
named cnt is declared outside the for loop and is not
declared inside the for loop.
**********************************************************/
class for4 { //define the controlling class
  public static void main(String[] args){ //main method
    int cnt = 5; //declare local method variable
    System.out.println(
              "Value of method var named cnt is " + cnt);

    for(cnt = 0; cnt &lt; 2; cnt++)
      System.out.println(
                  "Value of loop var named cnt is " + cnt);

    System.out.println(
                "Value of method var named cnt is " + cnt);
  }//end main
}//End controlling class.  Note no semicolon required
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>



	

<para id="p1087">
<emphasis id="strong1094" effect="bold">
Empty clauses in a 

<emphasis id="em1031" effect="italics">
for

</emphasis>
 loop

</emphasis>
</para>





<para id="p1088">
The first and third clauses in a 

<emphasis id="strong1095" effect="bold">
for

</emphasis>
 loop can be 
left empty but the semicolons must be there as placeholders. 

</para>





<para id="p1089">
One author suggests that even the middle clause can be empty, but it isn't 
obvious to this author how the loop would ever terminate if there is no 
conditional expression to be evaluated. Perhaps the loop could be terminated by 
using a break inside the loop, but in that case, you might just as well 
use a 

<emphasis id="strong1096" effect="bold">
while

</emphasis>
 loop. 

</para>





</section>
<section id="h21005">
<title>
<emphasis id="The_for_each_loop" effect="bold">

The for-each loop

</emphasis>


</title>




<para id="p1090">
There is another form of loop structure that is often referred to as a


<emphasis id="strong1097" effect="bold">
for-each

</emphasis>
 loop. In order to appreciate the benefits of 
this loop structure, you need to be familiar with Java collections and iterators, 
both of which are beyond the scope of this module.

</para>





<para id="p1091">
As near as I can tell, there is nothing that you can do with the 

<emphasis id="strong1098" effect="bold">

for-each

</emphasis>
 loop that you cannot also do with the conventional 

<emphasis id="strong1099" effect="bold">
for

</emphasis>
 
loop described above. Therefore, I rarely use it. You can find a description of 
the 

<emphasis id="strong1100" effect="bold">
for-each

</emphasis>
 loop on this Oracle


<link id="a1058" url="http://docs.oracle.com/javase/1.5.0/docs/guide/language/foreach.html">


website

</link>

. 

</para>





<para id="p1092">
I don't plan to discuss it further in this module. However, before you go for 
a job interview, you should probably do some online research and learn about it 
because an interviewer could use a question about the 

<emphasis id="strong1101" effect="bold">
for-each

</emphasis>
 
loop to trip you up in the Q and A portion of the interview.

</para>






</section>
<section id="h21006">
<title>
<emphasis id="thedowhileloop" effect="bold">

The 
do-while loop

</emphasis>


</title>




<para id="p1093">
The 

<emphasis id="strong1102" effect="bold">
do-while

</emphasis>
 loop is another implementation of the 

<emphasis id="em1032" effect="italics">
loop

</emphasis>
 
pillar mentioned 

<link id="a1059" target-id="three_pillars">

earlier

</link>

. However, it differs from 
the 

<emphasis id="strong1103" effect="bold">
while

</emphasis>
 loop and the 

<emphasis id="strong1104" effect="bold">
for

</emphasis>
 loop in one 
important respect; it is an 

<emphasis id="em1033" effect="italics">
exit-condition

</emphasis>
 loop.

</para>





<para id="p1094">
<emphasis id="strong1105" effect="bold">
An exit-condition loop

</emphasis>
</para>





<para id="p1095">
Java provides an 

<emphasis id="em1034" effect="italics">
exit-condition

</emphasis>
 loop 
having the syntax shown in 

<link id="a1060" target-id="Figure_6">

Figure 6

</link>

. 

</para>




	

<table id="table1010" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1010">

			

<row id="tr1020">

				

<entry id="th1010">
<emphasis id="Figure_6" effect="bold">

Figure 6

</emphasis>

. Syntax of a do-while loop.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1010">

			

<row id="tr1021">

				

<entry id="td1010">



<code id="pre1010" display="block">
do {
    statements
              } while (conditional expression);
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>


	

<para id="p1096">
<emphasis id="strong1106" effect="bold">
Behavior

</emphasis>
</para>





<para id="p1097">
The statements in the body of the loop continue to be 
executed for as long as the conditional expression evaluates to true. 
An exit-condition loop guarantees that the body of the loop will be 
executed at least one time, even if the conditional expression 
evaluates to false the first time it is tested. 

</para>





</section>
<section id="h21007">
<title>
<emphasis id="thebreakandcontinuestatements" effect="bold">

The break and continue statements

</emphasis>


</title>




<para id="p1098">
<emphasis id="strong1107" effect="bold">
General behavior

</emphasis>
</para>





<para id="p1099">
Although some authors suggest that the 

<emphasis id="strong1108" effect="bold">
break

</emphasis>
 and 

<emphasis id="strong1109" effect="bold">

continue

</emphasis>
 statements provide an 
alternative to the infamous 

<emphasis id="strong1110" effect="bold">
goto

</emphasis>
 statement of earlier 
programming languages, it appears that the behaviors of the 

<emphasis id="strong1111" effect="bold">
labeled break

</emphasis>
 and 

<emphasis id="strong1112" effect="bold">
labeled continue

</emphasis>
 statements 
are much 
more restrictive than a general 

<emphasis id="strong1113" effect="bold">
goto

</emphasis>
. 

</para>






</section>
<section id="h21008">
<title>
<emphasis id="unlabeledbreakandcontinue" effect="bold">

Unlabeled break and continue

</emphasis>


</title>




<para id="p1100">
The 

<emphasis id="strong1114" effect="bold">
break

</emphasis>
 and 

<emphasis id="strong1115" effect="bold">
continue

</emphasis>
 statements are 
supported in both labeled and unlabeled form.

</para>





<para id="p1101">
First consider the behavior of break and continue in 
their unlabeled configuration. 

</para>





<para id="p1102">
<emphasis id="strong1116" effect="bold">
Use of a 

<emphasis id="em1035" effect="italics">
break

</emphasis>
 statement

</emphasis>
</para>





<para id="p1103">
The 

<emphasis id="strong1117" effect="bold">
break

</emphasis>
 statement can be used in a switch 
statement or in a loop. When encountered in a switch statement, break 
causes control to be passed to the next statement outside the innermost 
enclosing switch statement. 

</para>





<para id="p1104">
When break is encountered in a loop, it causes control to be passed to 
the next statement outside the innermost enclosing loop. 

</para>





<para id="p1105">
As you will see later, labeled break statements can be used to 
pass control to the next statement following switch or loop statements 
beyond the innermost switch or loop statement when those 
statements are nested. 

</para>





<para id="p1106">
<emphasis id="strong1118" effect="bold">
Use of a continue statement

</emphasis>
</para>





<para id="p1107">
The continue statement cannot be used in a switch statement, but can be used 
inside a loop.

</para>





<para id="p1108">
When an unlabeled continue statement is encountered, it causes the current iteration 
of the current loop to be terminated and the next 
iteration to begin. 

</para>





<para id="p1109">
A labeled continue statement can cause control to be passed to the 
next iteration of an outer enclosing loop in a nested loop 
situation. 

</para>





<para id="p1110">
An example of the use of an unlabeled switch statement is given 
in the next section. 

</para>






</section>
<section id="h21009">
<title>
<emphasis id="labeledbreakandcontinue" effect="bold">

Labeled break and continue statements

</emphasis>


</title>




<para id="p1111">
This section discusses the use of labeled break and 
continue statements. 

</para>






<section id="h31002">
<title>
<emphasis id="labeledbreakstatements" effect="bold">


</emphasis>


Labeled break Statements

</title>




<para id="p1112">
One way to describe the behavior of a labeled break in 
Java is to say: "Break all the way out of the labeled statement." 

</para>





<para id="p1113">
<emphasis id="strong1119" effect="bold">
Syntax of a labeled statement

</emphasis>
</para>





<para id="p1114">
To begin with, the syntax of a labeled statement is a label followed by a colon ahead of the statement 
as shown in 

<link id="a1061" target-id="Figure_7">

Figure 7

</link>

.

</para>







	

	

<table id="table1011" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1011">

			

<row id="tr1022">

				

<entry id="th1011">
<emphasis id="Figure_7" effect="bold">

Figure 7

</emphasis>

. Syntax of a labeled 
				statement.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1011">

			

<row id="tr1023">

				

<entry id="td1011">



<code id="pre1011" display="block">
myLabel:  myStatement;
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>


	

<para id="p1115">
The label can be any legal Java identifier.

</para>





<para id="p1116">
<emphasis id="strong1120" effect="bold">
Behavior of labeled break

</emphasis>
</para>





<para id="p1117">
The behavior of a labeled break can best be 
illustrated using nested switch statements. For a comparison of 
labeled and unlabeled switch statements, consider the 
program shown in 

<link id="a1062" target-id="Listing_6">

Listing 6

</link>

 named 

<emphasis id="strong1121" effect="bold">
switch1

</emphasis>
, which does not use a labeled 
break. Even though this program has a labeled statement, that statement is 
not referenced by a 

<emphasis id="strong1122" effect="bold">
break

</emphasis>
. Therefore, the label is of no consequence.

</para>




	

<table id="table1012" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1012">

			

<row id="tr1024">

				

<entry id="th1012">
<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

. The program named 
				switch1.java.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1012">

			

<row id="tr1025">

				

<entry id="td1012">



<code id="pre1012" display="block">
/*File switch1.java
This is a Java application which serves as a baseline
comparison for switch2.java which uses a labeled break.
Note that the program uses nested switch statements.

The program displays the following output:

Match and break from here
Case 6 in outer switch
Default in outer switch
Beyond switch statements

********************************************************/
class switch1 { //define the controlling class
  public static void main(String[] args){ //main method

  //Note that the following labeled switch statement is
  // not referenced by a labeled break in this program.
  // It will be referenced in the next program.  
  outerSwitch: switch(5){//labeled outer switch statement
    case 5: //execute the following switch statement
    //Note that the code for this case is not followed 
    // by break. Therefore, execution will fall through
    // the case 6 and the default.
      switch(1){ //inner switch statement
        case 1: System.out.println(
                            "Match and break from here");
                break; //break with no label
        case 2: System.out.println(
                           "No match for this constant");
                break;
      }//end inner switch statement

    case 6: System.out.println("Case 6 in outer switch");
    default: System.out.println(
                              "Default in outer switch");
  }//end outer switch statement

  System.out.println("Beyond switch statements");
  }//end main
}//End switch1 class.
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>





<para id="p1118">
After reviewing 

<emphasis id="strong1123" effect="bold">
switch1.java

</emphasis>
, consider the same program 
named 

<emphasis id="strong1124" effect="bold">
switch2.java

</emphasis>
 shown in 

<link id="a1063" target-id="Listing_7">

Listing 7

</link>

, 
which was modified to 
use a labeled break. 

</para>





<para id="p1119">
The 
outputs from both programs are shown in the comments at the beginning of the 
program. By examining the second program, and comparing the output from the 
second program with the first program, you should be able to see how the use of 
the labeled break statement causes control to break all the way out of 
the labeled switch statement. 

</para>




	

<table id="table1013" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1013">

			

<row id="tr1026">

				

<entry id="th1013">
<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

. The program named 
				switch2.java.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1013">

			

<row id="tr1027">

				

<entry id="td1013">



<code id="pre1013" display="block">
/*File switch2.java
This is a Java application which uses a labeled break.
Note that the program uses nested switch statements.

See switch1.java for a comparison program which does not
use a labeled break.

The program displays the following output:

Match and break from here
Beyond switch statements
**********************************************************/
class switch2 { //define the controlling class
  public static void main(String[] args){ //main method

  outerSwitch: switch(5){//labeled outer switch statement
    case 5: //execute the following switch statement
    //Note that the code for this case is not followed by
    // break. Therefore, except for the labeled break at 
    // case 1, execution would fall through the case 6 and
    // the default as demonstrated in the program named
    // switch1. However, the use of the labeled break
    // causes control to break all the way out of the
    // labeled switch bypassing case 6 and the default.
      switch(1){ //inner switch statement
        case 1: System.out.println(
                              "Match and break from here");
                break outerSwitch; //break with label
        case 2: System.out.println(
                             "No match for this constant");
                break;
      }//end inner switch statement

    case 6: System.out.println(
                                 "Case 6 in outer switch");
    default: System.out.println("Default in outer switch");
  }//end outer switch statement

  System.out.println("Beyond switch statements");
  }//end main
}//End switch1 class.
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>





<para id="p1120">
The modified program in 

<link id="a1064" target-id="Listing_7">

Listing 7

</link>

 uses a labeled break statement 
in the code group for 

<emphasis id="em1036" effect="italics">
case 1

</emphasis>
 whereas the original program in


<link id="a1065" target-id="Listing_6">

Listing 6

</link>

 has an unlabeled break in that position. 

</para>





<para id="p1121">
By comparing the output from this program with the output from the 
previous program, you can see that execution of the labeled break 
statement caused control to break all the way out of the labeled 
switch statement completely bypassing 

<emphasis id="em1037" effect="italics">
case 6

</emphasis>
 and default. 

</para>






<para id="p1122">
As you can see from examining the output, the labeled break 
statement causes the program to break all the way out of 
the switch statement which bears a matching label. 

</para>






<para id="p1123">
A similar situation exists when a labeled break is used in 
nested loops with one of the enclosing outer loops being labeled. Control will 
break out of the enclosing loop to which the labeled break refers. 
It will be left as an exercise for the student to demonstrate this behavior to 
his or her satisfaction. 

</para>






</section>
<section id="h31003">
<title>
<emphasis id="labeledcontinuestatements" effect="bold">


</emphasis>


Labeled continue statements

</title>




<para id="p1124">
Now consider use of the labeled continue statement. A 


<emphasis id="strong1125" effect="bold">
continue

</emphasis>
 statement can only be used in a loop; it cannot be used in a 
switch. The behavior of a labeled continue statement can be 
described as follows: "Terminate the current iteration and continue 
with the next iteration of the loop to which the label refers." 

</para>





<para id="p1125">
Again, it will be left as an exercise for the student to demonstrate this 
behavior to his or her satisfaction. 

</para>






</section>
</section>
<section id="h21010">
<title>
<emphasis id="thereturnstatement" effect="bold">

The 
return statement

</emphasis>


</title>




<para id="p1126">
<emphasis id="strong1126" effect="bold">
Use of the return statement

</emphasis>
</para>





<para id="p1127">
Java supports the use of the 

<emphasis id="strong1127" effect="bold">
return

</emphasis>
 
statement to terminate a method and 

<emphasis id="em1038" effect="italics">
(optionally)

</emphasis>
 return a value to 
the calling method.

</para>





<para id="p1128">
<emphasis id="strong1128" effect="bold">
The return type

</emphasis>
</para>





<para id="p1129">
The type of value returned must match the type 
of the declared return value for the method. 

</para>





<para id="p1130">
<emphasis id="strong1129" effect="bold">
The void return type

</emphasis>
</para>





<para id="p1131">
If the return value is declared as 

<emphasis id="strong1130" effect="bold">
void

</emphasis>
, you can use 
the syntax shown in 

<link id="a1066" target-id="Figure_8">

Figure 8

</link>

 to terminate the method. 

<emphasis id="em1039" effect="italics">
(You can also simply allow the 
method to run out of statements to execute.) 

</emphasis>
 

</para>







	

	

<table id="table1014" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1014">

			

<row id="tr1028">

				

<entry id="th1014">
<emphasis id="Figure_8" effect="bold">

Figure 8

</emphasis>

. An empty return statement.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1014">

			

<row id="tr1029">

				

<entry id="td1014">



<code id="pre1014" display="block">
return;</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>


	

<para id="p1132">
<emphasis id="strong1131" effect="bold">
Returning a value

</emphasis>
</para>





<para id="p1133">
If the method returns a value, follow the word 
return with an expression 

<emphasis id="em1040" effect="italics">
(or constant)

</emphasis>
 that evaluates to the value 
being returned as shown in 

<link id="a1067" target-id="Figure_9">

Figure 9

</link>

.

</para>







	

	

<table id="table1015" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1015">

			

<row id="tr1030">

				

<entry id="th1015">
<emphasis id="Figure_9" effect="bold">

Figure 9

</emphasis>

. Returning a value from a 
				method.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1015">

			

<row id="tr1031">

				

<entry id="td1015">



<code id="pre1015" display="block">
return x+y;
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>


	

<para id="p1134">
<emphasis id="strong1132" effect="bold">
Return by value only

</emphasis>
</para>





<para id="p1135">
You are allowed to return only by 

<emphasis id="em1041" effect="italics">
value

</emphasis>
. 
In the case of primitive types, this returns a copy of the returned item. In the 
case of objects, returning by value returns a copy of the object's reference.

</para>





<para id="p1136">
<emphasis id="strong1133" effect="bold">
What you can do with a copy the object's reference

</emphasis>
</para>





<para id="p1137">
Having a copy of the reference is just as good as 
having the original reference. A copy of the reference gives you access to the 
object.

</para>





<para id="p1138">
<emphasis id="strong1134" effect="bold">
When Java objects are destroyed

</emphasis>
</para>





<para id="p1139">
All objects in Java are stored in dynamic memory 
and that memory is not overwritten until all references to that memory cease 
to exist. 

</para>





<para id="p1140">
Java uses a garbage collector running on a background thread to reclaim 
memory from objects that have become 

<emphasis id="em1042" effect="italics">
eligible for garbage collection

</emphasis>
. 

</para>





<para id="p1141">
An object becomes eligible for garbage collection when there are no longer 
any variables, array elements, or similar storage locations containing a 
reference to the object. In other words, it becomes eligible when there is no 
way for the program code to find a reference to the object. 

</para>








</section>
<section id="h21011">
<title>
<emphasis id="exceptionhandling" effect="bold">

Exception handling

</emphasis>


</title>




<para id="p1142">
Exception handling is a process that modifies the flow of control of 
a program, so it merits being mentioned in this module. However, it is a fairly 
complex topic, which will be discussed in detail in 
future modules. 

</para>





<para id="p1143">
Suffice it at this point to say that whenever an exception is detected, 
control is transferred to exception handler code if such code has been provided. Otherwise, the program will terminate. Thus, 
the exception handling system merits being mentioned in discussions regarding flow 
of control. 

</para>





</section>
</section>
<section id="h11004">
<title>
<emphasis id="Looking_ahead" effect="bold">

Looking ahead

</emphasis>


</title>




<para id="p1144">
As you approach the end of this group of 

<emphasis id="em1043" effect="italics">
Programming Fundamentals

</emphasis>
 
modules, you should be preparing yourself for the more challenging ITSE 2321 OOP 
tracks identified below:

</para>





<list id="ul1010" list-type="bulleted">

	

<item id="li1045">
<link id="a1068" url="http://cnx.org/content/m44148">

Java OOP: The Guzdial-Ericson 
	Multimedia Class Library

</link>


</item>


	

<item id="li1046">
<link id="a1069" url="http://cnx.org/content/m44153">

Java OOP: Objects and 
	Encapsulation

</link>


</item>




</list>


	
	

</section>
<section id="h11005">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1145">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1135" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1011" list-type="bulleted">

					

<item id="li1047">
Module name: Jb0230: Java OOP: Flow of Control

</item>


					

<item id="li1048">
File: Jb0230.htm


</item>


					

<item id="li1049">
Originally published: 1997

</item>


					

<item id="li1050">
Published at cnx.org: 11/24/12

</item>


				

</list>


				

</note>

			


		



	





	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1136" effect="bold">
Disclaimers:

</emphasis>
<para id="p1146">
<emphasis id="strong1137" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>



				

<para id="p1147">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>



				

<para id="p1148">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>



				

<para id="p1149">
<emphasis id="strong1138" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>



				

</note>

			


		



	



	

<para id="p1150">
-end- 

</para>







</section>
</content>




</document>