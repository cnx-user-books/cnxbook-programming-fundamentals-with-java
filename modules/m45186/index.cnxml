<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Jb0210r Review</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m45186</md:content-id>
  <md:title>Jb0210r Review</md:title>
  <md:abstract>This module contains review questions and answers keyed to the module titled Jb0210: Java OOP: Operators.</md:abstract>
  <md:uuid>a055ae1f-1e87-430d-ba6e-5d812019ec77</md:uuid>
</metadata>

<content>






<para id="p1000">
Revised: Mon Mar 28 14:04:36 CDT 2016

</para>




<para id="p1001">
<emphasis id="em1000" effect="italics">
This page is included in the following Books:

</emphasis>
</para>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">

	

<link id="a1000" url="http://cnx.org/contents/EHRr6hjR:pDHzTeQb">


<emphasis id="em1001" effect="italics">
Programming Fundamentals with Java 
	

</emphasis>
 
	

</link>


</item>


	

<item id="li1001">
<link id="a1001" url="http://cnx.org/contents/-2RmHFs_:kFS-maG_">


<emphasis id="em1002" effect="italics">
Object-Oriented Programming (OOP) with Java 
	

</emphasis>
 
	

</link>

 

</item>




</list>













<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1001" list-type="bulleted">

	

<item id="li1002">
<link id="a1002" target-id="Preface">

Preface

</link>


</item>


	

<item id="li1003">
<link id="a1003" target-id="Questions">

Questions

</link>


	

<list id="ul1002" list-type="bulleted">

		

<item id="li1004">
<link id="a1004" target-id="question01">

1

</link>

, 

<link id="a1005" target-id="question02">

2

</link>

,
		

<link id="a1006" target-id="question03">

3

</link>

, 

<link id="a1007" target-id="question04">

4

</link>

,
		

<link id="a1008" target-id="question05">

5

</link>

, 

<link id="a1009" target-id="question06">

6

</link>

,
		

<link id="a1010" target-id="question07">

7

</link>

, 

<link id="a1011" target-id="question08">

8

</link>

,
		

<link id="a1012" target-id="question09">

9

</link>

, 

<link id="a1013" target-id="question10">

10

</link>

, 
		

<link id="a1014" target-id="question11">

11

</link>

, 

<link id="a1015" target-id="answer12">

12

</link>

, 
		

<link id="a1016" target-id="question13">

13

</link>

, 
		

<link id="a1017" target-id="question14">

14

</link>

, 
		

<link id="a1018" target-id="question15">

15

</link>

,
		

<link id="a1019" target-id="question16">

16

</link>

,
		

<link id="a1020" target-id="question17">

17

</link>

, 
		

<link id="a1021" target-id="question18">

18

</link>

,
		

<link id="a1022" target-id="question19">

19

</link>

,
		

<link id="a1023" target-id="question20">

20

</link>

,
		

<link id="a1024" target-id="question21">

21

</link>

,
		

<link id="a1025" target-id="question22">

22

</link>

,
		

<link id="a1026" target-id="question23">

23

</link>

,
		

<link id="a1027" target-id="question24">

24

</link>

,
		

<link id="a1028" target-id="question25">

25

</link>

,
		

<link id="a1029" target-id="question26">

26

</link>

,
		

<link id="a1030" target-id="question27">

27

</link>

,
		

<link id="a1031" target-id="question28">

28

</link>

,
		

<link id="a1032" target-id="question29">

29

</link>

,
		

<link id="a1033" target-id="question30">

30

</link>

,
		

<link id="a1034" target-id="question31">

31

</link>

,
		

<link id="a1035" target-id="question32">

32

</link>

,
		

<link id="a1036" target-id="question33">

33

</link>

,
		

<link id="a1037" target-id="question34">

34

</link>

,
		

<link id="a1038" target-id="question35">

35

</link>

,
		

<link id="a1039" target-id="question36">

36

</link>

,
		

<link id="a1040" target-id="question37">

37

</link>

,
		

<link id="a1041" target-id="question38">

38

</link>


</item>


	

</list>


	

</item>


	

<item id="li1005">
<link id="a1042" target-id="Listings">

Listings

</link>


</item>


	

<item id="li1006">
<link id="a1043" target-id="Answers">

Answers

</link>


</item>


	

<item id="li1007">
<link id="a1044" target-id="Miscellaneous">

Miscellaneous

</link>


</item>




</list>




</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>




<para id="p1002">
This module contains review questions and answers keyed to the module titled 


<link id="a1045" url="http://cnx.org/content/m45195">

Jb0210: Java OOP: Operators

</link>

.

</para>





<para id="p1003">
The questions and the answers are connected by hyperlinks to make it easy for 
you to navigate from the question to the answer and back again. 

</para>





</section>
<section id="h11002">
<title>
<emphasis id="Questions" effect="bold">

Questions

</emphasis>


</title>





<section id="h21000">
<title>
<emphasis id="question01" effect="bold">

Question 1

</emphasis>


<emphasis id="strong1000" effect="bold">
. 

</emphasis>
 

</title>




<para id="p1004">
An operator performs an action on what? Provide the name. 

</para>





<para id="p1005">
<link id="a1046" target-id="answer01">

Answer 1

</link>

 

</para>






</section>
<section id="h21001">
<title>
<emphasis id="question02" effect="bold">

Question 2

</emphasis>


</title>




<para id="p1006">
What do we call an operator that operates on only one operand? 

</para>





<para id="p1007">
<link id="a1047" target-id="answer02">

Answer 2

</link>

 

</para>






</section>
<section id="h21002">
<title>
<emphasis id="question03" effect="bold">

Question 3

</emphasis>

 

</title>




<para id="p1008">
What do we call an operator that operates on two operands? 

</para>





<para id="p1009">
<link id="a1048" target-id="answer03">

Answer 3

</link>

 

</para>






</section>
<section id="h21003">
<title>
<emphasis id="question04" effect="bold">

Question 4

</emphasis>


</title>




<para id="p1010">
Is the minus sign a 

<emphasis id="em1003" effect="italics">
unary

</emphasis>
 or a 

<emphasis id="em1004" effect="italics">
binary

</emphasis>
 operator, or both? 
Explain your answer. 

</para>





<para id="p1011">
<link id="a1049" target-id="answer04">

Answer 4

</link>

 

</para>






</section>
<section id="h21004">
<title>
<emphasis id="question05" effect="bold">

Question 5

</emphasis>


</title>




<para id="p1012">
Describe operator overloading. 

</para>





<para id="p1013">
<link id="a1050" target-id="answer05">

Answer 5

</link>


</para>






</section>
<section id="h21005">
<title>
<emphasis id="question06" effect="bold">

Question 6

</emphasis>


</title>




<para id="p1014">
True or false? Java programmers may overload operators.

</para>





<para id="p1015">
<link id="a1051" target-id="answer06">

Answer 6

</link>

 

</para>






</section>
<section id="h21006">
<title>
<emphasis id="question07" effect="bold">

Question 7

</emphasis>


</title>




<para id="p1016">
Show the symbols used for the following operators in Java: 

<emphasis id="em1005" effect="italics">
assignment

</emphasis>
,


<emphasis id="em1006" effect="italics">
not equal

</emphasis>
, 

<emphasis id="em1007" effect="italics">
addition

</emphasis>
, 

<emphasis id="em1008" effect="italics">
cast

</emphasis>
. 

</para>





<para id="p1017">
<link id="a1052" target-id="answer07">

Answer 7

</link>


</para>






</section>
<section id="h21007">
<title>
<emphasis id="question08" effect="bold">

Question 8

</emphasis>

 

</title>




<para id="p1018">
Are any operators automatically overloaded in Java? If so, identify one and 
describe its overloaded behavior. 

</para>





<para id="p1019">
<link id="a1053" target-id="answer08">

Answer 8

</link>

 

</para>






</section>
<section id="h21008">
<title>
<emphasis id="question09" effect="bold">

Question 9

</emphasis>


</title>




<para id="p1020">
What is the purpose of the cast operator? 

</para>





<para id="p1021">
<link id="a1054" target-id="answer09">

Answer 9

</link>

 

</para>






</section>
<section id="h21009">
<title>
<emphasis id="question10" effect="bold">

Question 10

</emphasis>


</title>




<para id="p1022">
True or false? The increment operator is a 

<emphasis id="em1009" effect="italics">
binary

</emphasis>
 operator.

</para>





<para id="p1023">
<link id="a1055" target-id="answer10">

Answer 10

</link>


</para>



	


</section>
<section id="h21010">
<title>
<emphasis id="question11" effect="bold">

Question 11

</emphasis>


</title>




<para id="p1024">
Show the symbol for the increment operator.

</para>





<para id="p1025">
<link id="a1056" target-id="answer11">

Answer 11

</link>


</para>



	


</section>
<section id="h21011">
<title>
<emphasis id="question12" effect="bold">

Question 12

</emphasis>


</title>




<para id="p1026">
Describe the appearance and the behavior of the increment operator with both


<emphasis id="em1010" effect="italics">
prefix

</emphasis>
 and 

<emphasis id="em1011" effect="italics">
postfix

</emphasis>
 notation. Show example, possibly incomplete, 
code fragments illustrating both notational forms. 

</para>





<para id="p1027">
<link id="a1057" target-id="answer12">

Answer 12

</link>


</para>



	


</section>
<section id="h21012">
<title>
<emphasis id="question13" effect="bold">

Question 13

</emphasis>


</title>




<para id="p1028">
Show the output that would be produced by the Java application in 


<link id="a1058" target-id="Listing_1">

Listing 1

</link>

. 

</para>




	

<table id="table1000" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. Listing for Question 
				13.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">



<code id="pre1000" display="block">
class incr01 { //define the controlling class
  public static void main(String[] args){ //define main
    int x = 5, X = 5, y = 5, Y = 5;
    System.out.println("x = " + x );
    System.out.println("X = " + X );
    System.out.println("x + X++ = " + (x + X++) );
    System.out.println("X = " + X );
    System.out.println();
    System.out.println("y = " + y );
    System.out.println("Y = " + Y );
    System.out.println("y + ++Y = " + (y + ++Y) );
    System.out.println("Y = " + Y );    
  }//end main
}//End incr01 class.  Note no semicolon required
//End Java application
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>





<para id="p1029">
<link id="a1059" target-id="answer13">

Answer 13

</link>


</para>



	


</section>
<section id="h21013">
<title>
<emphasis id="question14" effect="bold">

Question 14

</emphasis>


</title>




<para id="p1030">
True or false? 

<emphasis id="em1012" effect="italics">
Binary

</emphasis>
 operators use 

<emphasis id="em1013" effect="italics">
outfix

</emphasis>
 notation. If your 
answer is False, explain why. 

</para>





<para id="p1031">
<link id="a1060" target-id="answer14">

Answer 14

</link>


</para>



	


</section>
<section id="h21014">
<title>
<emphasis id="question15" effect="bold">

Question 15

</emphasis>


</title>




<para id="p1032">
In practice, what does it mean to say that an operator that has performed an 
action returns a value 

<emphasis id="em1014" effect="italics">
(or evaluates to a value) 

</emphasis>
of a given type? 

</para>





<para id="p1033">
<link id="a1061" target-id="answer15">

Answer 15

</link>


</para>



	


</section>
<section id="h21015">
<title>
<emphasis id="question16" effect="bold">

Question 16

</emphasis>


</title>




<para id="p1034">
Show and describe at least five of the 

<emphasis id="em1015" effect="italics">
binary arithmetic

</emphasis>
 operators 
supported by Java (Clarification: 

<emphasis id="em1016" effect="italics">
binary

</emphasis>
 operators does not mean 

<emphasis id="em1017" effect="italics">

bitwise

</emphasis>
 operators). 

</para>





<para id="p1035">
<link id="a1062" target-id="answer16">

Answer 16

</link>


</para>






</section>
<section id="h21016">
<title>
<emphasis id="question17" effect="bold">

Question 17

</emphasis>


</title>




<para id="p1036">
In addition to arithmetic addition, what is another use for the plus operator


<emphasis id="em1018" effect="italics">
(+)

</emphasis>
? Show an example code fragment to illustrate your answer. The code 
fragment need not be a complete statement. 

</para>





<para id="p1037">
<link id="a1063" target-id="answer17">

Answer 17

</link>


</para>






</section>
<section id="h21017">
<title>
<emphasis id="question18" effect="bold">

Question 18

</emphasis>


</title>




<para id="p1038">
When the plus operator 

<emphasis id="em1019" effect="italics">
(+)

</emphasis>
 is used as a concatenation operator, what 
is the nature of its behavior if its left operand is of type 

<emphasis id="strong1001" effect="bold">
String

</emphasis>
 
and its right operand is not of type 

<emphasis id="strong1002" effect="bold">
String

</emphasis>
? If the right 
operand is a variable that is not of type 

<emphasis id="strong1003" effect="bold">
String

</emphasis>
, what is the 
impact of this behavior on that variable. 

</para>





<para id="p1039">
<link id="a1064" target-id="answer18">

Answer 18

</link>


</para>






</section>
<section id="h21018">
<title>
<emphasis id="question19" effect="bold">

Question 19

</emphasis>


</title>




<para id="p1040">
Show and describe four 

<emphasis id="em1020" effect="italics">
unary

</emphasis>
 arithmetic operators supported by Java.

</para>





<para id="p1041">
<link id="a1065" target-id="answer19">

Answer 19

</link>


</para>






</section>
<section id="h21019">
<title>
<emphasis id="question20" effect="bold">

Question 20

</emphasis>


</title>




<para id="p1042">
What is the type returned by 

<emphasis id="em1021" effect="italics">
relational

</emphasis>
 operators in Java?

</para>





<para id="p1043">
<link id="a1066" target-id="answer20">

Answer 20

</link>


</para>






</section>
<section id="h21020">
<title>
<emphasis id="question21" effect="bold">

Question 21

</emphasis>


</title>




<para id="p1044">
Show and describe six different 

<emphasis id="em1022" effect="italics">
relational

</emphasis>
 operators supported by 
Java. 

</para>





<para id="p1045">
<link id="a1067" target-id="answer21">

Answer 21

</link>


</para>






</section>
<section id="h21021">
<title>
<emphasis id="question22" effect="bold">

Question 22

</emphasis>


</title>




<para id="p1046">
Show the output that would be produced by the Java application shown in 


<link id="a1068" target-id="Listing_2">

Listing 2

</link>

. 

</para>




	

<table id="table1001" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. Listing for Question 
				22.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">



<code id="pre1001" display="block">
class relat01 { //define the controlling class
  public static void main(String[] args){ //define main
    System.out.println("The relational 6&lt;5 is " + (6&lt;5 ));
    System.out.println("The relational 6&gt;5 is " + (6&gt;5 ));
  }//end main
}//End relat01 class.  Note no semicolon required
//End Java application
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>





<para id="p1047">
<link id="a1069" target-id="answer22">

Answer 22

</link>


</para>






</section>
<section id="h21022">
<title>
<emphasis id="question23" effect="bold">

Question 23

</emphasis>


</title>




<para id="p1048">
Show and describe three operators 

<emphasis id="em1023" effect="italics">
(frequently referred to as conditional 
or logical operators) 

</emphasis>
that are often combined with relational operators to 
construct more complex expressions 

<emphasis id="em1024" effect="italics">
(often called conditional expressions)

</emphasis>
. 
Hint: The 

<emphasis id="strong1004" effect="bold">
||

</emphasis>
 operator returns true if either the left operand, the right 
operand, or both operands are true. What are the other two and how do they 
behave? 

</para>





<para id="p1049">
<link id="a1070" target-id="answer23">

Answer 23

</link>


</para>






</section>
<section id="h21023">
<title>
<emphasis id="question24" effect="bold">

Question 24

</emphasis>


</title>




<para id="p1050">
Describe the special behavior of the 

<emphasis id="strong1005" effect="bold">
||

</emphasis>
 operator in the 
following expression for the case where the value of the variable 

<emphasis id="strong1006" effect="bold">
a

</emphasis>
 
is less than the value of the variable 

<emphasis id="strong1007" effect="bold">
b

</emphasis>
. 

</para>







	

<note id="note1000" type="">


		


			


				


				

<code id="pre1002" display="block">
(a &lt; b) || (c &lt; d)</code>


				

</note>

			


		



	





<para id="p1051">
<link id="a1071" target-id="answer24">

Answer 24

</link>


</para>






</section>
<section id="h21024">
<title>
<emphasis id="question25" effect="bold">

Question 25

</emphasis>


</title>




<para id="p1052">
Show the symbols used for the bitwise 

<emphasis id="em1025" effect="italics">
and

</emphasis>
 operator and the bitwise 

<emphasis id="em1026" effect="italics">

inclusive or

</emphasis>
 
operator. 

</para>





<para id="p1053">
<link id="a1072" target-id="answer25">

Answer 25

</link>


</para>








</section>
<section id="h21025">
<title>
<emphasis id="question26" effect="bold">

Question 26

</emphasis>


</title>




<para id="p1054">
Show and describe seven operators in Java that perform actions on the operands 
one bit at a time 

<emphasis id="em1027" effect="italics">
(bitwise operators)

</emphasis>
. 

</para>





<para id="p1055">
<link id="a1073" target-id="answer26">

Answer 26

</link>


</para>






</section>
<section id="h21026">
<title>
<emphasis id="question27" effect="bold">

Question 27

</emphasis>


</title>




<para id="p1056">
True or false? In Java, the 

<emphasis id="em1028" effect="italics">
signed

</emphasis>
 right shift operation populates the 
vacated bits with the zeros, while the left shift and the 

<emphasis id="em1029" effect="italics">
unsigned

</emphasis>
 right 
shift populate the vacated bits with the sign bit. If your answer is False, 
explain why. 

</para>





<para id="p1057">
<link id="a1074" target-id="answer27">

Answer 27

</link>


</para>






</section>
<section id="h21027">
<title>
<emphasis id="question28" effect="bold">

Question 28

</emphasis>


</title>




<para id="p1058">
True or false? In a 

<emphasis id="em1030" effect="italics">
signed

</emphasis>
 right-shift operation in Java, the bits 
shifted off the right end are lost. If your answer is False, explain why. 

</para>





<para id="p1059">
<link id="a1075" target-id="answer28">

Answer 28

</link>


</para>






</section>
<section id="h21028">
<title>
<emphasis id="question29" effect="bold">

Question 29

</emphasis>


</title>




<para id="p1060">
Using the symbols 1 and 0, construct a truth table showing the four possible 
combinations of 1 and 0. Using a 1 or a 0, show the result of the 

<emphasis id="em1031" effect="italics">
bitwise

</emphasis>



<emphasis id="em1032" effect="italics">
and

</emphasis>
 operation on these four combinations of 1 and 0. 

</para>





<para id="p1061">
<link id="a1076" target-id="answer29">

Answer 29

</link>


</para>






</section>
<section id="h21029">
<title>
<emphasis id="question30" effect="bold">

Question 30

</emphasis>


</title>




<para id="p1062">
Using the symbols 1 and 0 construct a truth table showing the four possible 
combinations of 1 and 0. Using a 1 or a 0, show the result of the 

<emphasis id="em1033" effect="italics">
bitwise

</emphasis>



<emphasis id="em1034" effect="italics">
inclusive or

</emphasis>
 operation on these four combinations of 1 and 0. 

</para>





<para id="p1063">
<link id="a1077" target-id="answer30">

Answer 30

</link>


</para>






</section>
<section id="h21030">
<title>
<emphasis id="question31" effect="bold">

Question 31

</emphasis>


</title>




<para id="p1064">
Using the symbols 1 and 0 construct a truth table showing the four possible 
combinations of 1 and 0. Using a 1 or a 0, show the result of the 

<emphasis id="em1035" effect="italics">
bitwise

</emphasis>



<emphasis id="em1036" effect="italics">
exclusive or

</emphasis>
 operation on these four combinations of 1 and 0. 

</para>





<para id="p1065">
<link id="a1078" target-id="answer31">

Answer 31

</link>


</para>






</section>
<section id="h21031">
<title>
<emphasis id="question32" effect="bold">

Question 32

</emphasis>


</title>




<para id="p1066">
True or false? For the 

<emphasis id="em1037" effect="italics">
exclusive or

</emphasis>
, if the two bits are different, 
the result is a 1. If the two bits are the same, the result is a 0. If your 
answer is False, explain why. 

</para>





<para id="p1067">
<link id="a1079" target-id="answer32">

Answer 32

</link>


</para>






</section>
<section id="h21032">
<title>
<emphasis id="question33" effect="bold">

Question 33

</emphasis>


</title>




<para id="p1068">
Is the 

<emphasis id="em1038" effect="italics">
assignment 

</emphasis>
operator a 

<emphasis id="em1039" effect="italics">
unary 

</emphasis>
operator or a 

<emphasis id="em1040" effect="italics">
binary 

</emphasis>

operator. Select one or the other. 

</para>





<para id="p1069">
<link id="a1080" target-id="answer33">

Answer 33

</link>


</para>






</section>
<section id="h21033">
<title>
<emphasis id="question34" effect="bold">

Question 34

</emphasis>


</title>




<para id="p1070">
True or false? In Java, when using the assignment operator, the value stored 
in memory and represented by the right operand is copied into the memory 
represented by the left operand. If your answer is False, explain why. 

</para>





<para id="p1071">
<link id="a1081" target-id="answer34">

Answer 34

</link>


</para>






</section>
<section id="h21034">
<title>
<emphasis id="question35" effect="bold">

Question 35

</emphasis>


</title>




<para id="p1072">
Show two of the 

<emphasis id="em1041" effect="italics">
shortcut

</emphasis>
 assignment operators and explain how they 
behave by comparing them with the regular 

<emphasis id="em1042" effect="italics">
(non-shortcut)

</emphasis>
 versions. 
Hint: the 

<emphasis id="em1043" effect="italics">
(^=)

</emphasis>
 operator is a 

<emphasis id="em1044" effect="italics">
shortcut

</emphasis>
 assignment operator. 

</para>





<para id="p1073">
<link id="a1082" target-id="answer35">

Answer 35

</link>


</para>






</section>
<section id="h21035">
<title>
<emphasis id="question36" effect="bold">

Question 36

</emphasis>


</title>




<para id="p1074">
Write a Java
application that clearly illustrates the difference between
the prefix and the postfix versions of the increment 
operator. Provide a termination message that displays your name.

</para>





<para id="p1075">
<link id="a1083" target-id="answer36">

Answer 36

</link>


</para>






</section>
<section id="h21036">
<title>
<emphasis id="question37" effect="bold">

Question 37

</emphasis>


</title>




<para id="p1076">
Write a Java
application that illustrates the use of the following
relational operators:
  


</para>







	

<note id="note1001" type="">


		


			


				


				

<code id="pre1003" display="block">
&lt; 
&gt; 
&lt;= 
&gt;= 
== 
!=</code>


				

</note>

			


		



	





<para id="p1077">
Provide appropriate text in the output.  Also provide
a termination message with your name.

</para>





<para id="p1078">
<link id="a1084" target-id="answer37">

Answer 37

</link>


</para>






</section>
<section id="h21037">
<title>
<emphasis id="question38" effect="bold">

Question 38

</emphasis>


</title>




<para id="p1079">
write a Java
application that illustrates the use of the following
logical or conditional operators:
  


</para>



	




	

<note id="note1002" type="">


		


			


				

<emphasis id="strong1008" effect="bold">
Logical or conditional operators

</emphasis>

				

<code id="pre1004" display="block">
&amp;&amp; 
|| 
!</code>


				

</note>

			


		



	



	

<para id="p1080">
Provide appropriate text in the output.  Also provide
a termination message with your name.

</para>





<para id="p1081">
<link id="a1085" target-id="answer38">

Answer 38

</link>


</para>













</section>
</section>
<section id="h11003">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1003" list-type="bulleted">

	

<item id="li1008">
<link id="a1086" target-id="Listing_1">

Listing 1

</link>

. Listing for Question 13. 

</item>


	

<item id="li1009">
<link id="a1087" target-id="Listing_2">

Listing 2

</link>

. Listing for Question 22. 

</item>


	

<item id="li1010">
<link id="a1088" target-id="Listing_3">

Listing 3

</link>

. Listing for Answer 38. 

</item>


	

<item id="li1011">
<link id="a1089" target-id="Listing_4">

Listing 4

</link>

. Listing for Answer 37. 

</item>


	

<item id="li1012">
<link id="a1090" target-id="Listing_5">

Listing 5

</link>

. Listing for Answer 36.

</item>




</list>





<para id="p1082">
<emphasis id="strong1009" effect="bold">
What is the meaning of the following two images?

</emphasis>
</para>





<para id="p1083">
This image was inserted here simply to insert some space between the 
questions and the answers to keep them from being visible on the screen at the 
same time. 

</para>





<para id="p1084">
The image is also an example of the kinds of things that we do in my course 
titled ITSE 2321, Object-Oriented Programming.

</para>






<media id="media1000" alt="Missing image" display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/Spacer01.jpg" width="339" height="290"/>
</media>





<para id="p1085">
This image was also inserted for the purpose of inserting space between the questions and the answers.

</para>





<para id="p1086">



<media id="media1001" alt="Missing image" display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/Spacer02.jpg" width="374" height="308"/>
</media>


</para>








</section>
<section id="h11004">
<title>
<emphasis id="Answers" effect="bold">

Answers

</emphasis>


</title>





<section id="h21038">
<title>
<emphasis id="answer38" effect="bold">

Answer 38

</emphasis>


</title>



	

<table id="table1002" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. Listing for Answer 38.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">



<code id="pre1005" display="block">
/*File SampProg09.java from module 22
Copyright 1997, R.G.Baldwin
Without reviewing the following solution, write a Java
application that illustrates the use of the following
logical or conditional operators:
  
&amp;&amp;  ||  !

Provide appropriate text in the output.  Also provide
a termination message with your name.
*********************************************************/
class SampProg09 { //define the controlling class
  public static void main(String[] args){ //define main
    System.out.println("true and true is " 
      + (true &amp;&amp; true) );
    System.out.println("true and false is " 
      + (true &amp;&amp; false) );

    System.out.println("true or true is " 
      + (true || true) );
    System.out.println("true or false is " 
      + (true || false) );
    System.out.println("false or false is " 
      + (false || false) );
    
    System.out.println("not true is " + (! true) );
    System.out.println("not false is " + (! false) );    

    System.out.println("Terminating, Dick Baldwin");
  }//end main
}//End SampProg09 class.  Note no semicolon required
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>





<para id="p1087">
<link id="a1091" target-id="question38">

Back to Question 38

</link>

 

</para>






</section>
<section id="h21039">
<title>
<emphasis id="answer37" effect="bold">

Answer 37

</emphasis>


</title>



	

<table id="table1003" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. Listing for Answer 37.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">



<code id="pre1006" display="block">
/*File SampProg08.java from module 22
Copyright 1997, R.G.Baldwin
Without reviewing the following solution, write a Java
application that illustrates the use of the following
relational operators:
  
&lt; &gt; &lt;= &gt;= == !=

Provide appropriate text in the output.  Also provide
a termination message with your name.
*********************************************************/
class SampProg08 { //define the controlling class
  public static void main(String[] args){ //define main
    System.out.println("The relational 6&lt;5 is " 
                                             + (6&lt;5 ) );
    System.out.println("The relational 6&gt;5 is " 
                                             + (6&gt;5 ) );
    System.out.println("The relational 5&gt;=5 is " 
                                            + (5&gt;=5 ) );
    System.out.println("The relational 5&lt;=5 is " 
                                            + (5&lt;=5 ) );
    System.out.println("The relational 6==5 is " 
                                               + (6==5 ) );
    System.out.println("The relational 6!=5 is " 
                                               + (6!=5 ) );
    System.out.println("Terminating, Dick Baldwin");
  }//end main
}//End SampProg08 class.  Note no semicolon required
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>





<para id="p1088">
<link id="a1092" target-id="question37">

Back to Question 37

</link>

 

</para>






</section>
<section id="h21040">
<title>
<emphasis id="answer36" effect="bold">

Answer 36

</emphasis>


</title>



	

<table id="table1004" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. Listing for Answer 36.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">



<code id="pre1007" display="block">
/*File SampProg07.java from module 22
Copyright 1997, R.G.Baldwin
Without reviewing the following solution, write a Java
application that clearly illustrates the difference between
the prefix and the postfix versions of the increment 
operator.

Provide a termination message that displays your name.
*********************************************************/
class SampProg07{
  static public void main(String[] args){
    int x = 3;
    int y = 3;
    int z = 10;
    System.out.println("Prefix version gives  " 
                                            + (z + ++x));
    System.out.println("Postfix version gives " 
                                            + (z + y++));
    System.out.println("Terminating, Dick Baldwin");
  }//end main
}//end class SampProg07
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>





<para id="p1089">
<link id="a1093" target-id="question36">

Back to Question 36

</link>

 

</para>






</section>
<section id="h21041">
<title>
<emphasis id="answer35" effect="bold">

Answer 35

</emphasis>


</title>




<para id="p1090">
Java supports the following list of 

<emphasis id="em1045" effect="italics">
shortcut

</emphasis>
 assignment operators. 
These operators allow you to perform an assignment and another operation with a 
single operator.

</para>







	

<note id="note1003" type="">


		


			


				


				

<code id="pre1008" display="block">
+= 
-= 
*= 
/= 
%= 
&amp;= 
|= 
^= 
&lt;&lt;= 
&gt;&gt;= 
&gt;&gt;&gt;=</code>


				

</note>

			


		



	





<para id="p1091">
For example, the two statements that follow perform the same operation.

</para>





<list id="ul1004" list-type="bulleted">

	

<item id="li1013">
<emphasis id="strong1010" effect="bold">
x += y;

</emphasis>
 

</item>


	

<item id="li1014">
<emphasis id="strong1011" effect="bold">
x = x + y;

</emphasis>
</item>




</list>




<para id="p1092">
The behavior of each of the 

<emphasis id="em1046" effect="italics">
shortcut

</emphasis>
 assignment operators follows this 
same pattern. 

</para>





<para id="p1093">
<link id="a1094" target-id="question35">

Back to Question 35

</link>

 

</para>






</section>
<section id="h21042">
<title>
<emphasis id="answer34" effect="bold">

Answer 34

</emphasis>


</title>




<para id="p1094">
True. 

</para>





<para id="p1095">
<link id="a1095" target-id="question34">

Back to Question 34

</link>

 

</para>






</section>
<section id="h21043">
<title>
<emphasis id="answer33" effect="bold">

Answer 33

</emphasis>


</title>




<para id="p1096">
The assignment operator is a 

<emphasis id="em1047" effect="italics">
binary 

</emphasis>
operator. 

</para>





<para id="p1097">
<link id="a1096" target-id="question33">

Back to Question 33

</link>

 

</para>






</section>
<section id="h21044">
<title>
<emphasis id="answer32" effect="bold">

Answer 32

</emphasis>


</title>




<para id="p1098">
True. 

</para>





<para id="p1099">
<link id="a1097" target-id="question32">

Back to Question 32

</link>

 

</para>






</section>
<section id="h21045">
<title>
<emphasis id="answer31" effect="bold">

Answer 31

</emphasis>


</title>




<para id="p1100">
The answer for the bitwise 

<emphasis id="em1048" effect="italics">
exclusive or

</emphasis>
 is: 

</para>





<list id="ul1005" list-type="bulleted">

	

<item id="li1015">
11 1 xor 1 produces 0

</item>


	

<item id="li1016">
10 1 xor 0 produces 1

</item>


	

<item id="li1017">
01 0 xor 1 produces 1

</item>


	

<item id="li1018">
00 0 xor 0 produces 0 

</item>




</list>




<para id="p1101">
<link id="a1098" target-id="question31">

Back to Question 31

</link>

 

</para>






</section>
<section id="h21046">
<title>
<emphasis id="answer30" effect="bold">

Answer 30

</emphasis>


</title>




<para id="p1102">
The answer for the bitwise 

<emphasis id="em1049" effect="italics">
inclusive or

</emphasis>
 is: 

</para>





<list id="ul1006" list-type="bulleted">

	

<item id="li1019">
11 1 or 1 produces 1

</item>


	

<item id="li1020">
10 1 or 0 produces 1

</item>


	

<item id="li1021">
01 0 or 1 produces 1

</item>


	

<item id="li1022">
00 0 or 0 produces 0 

</item>




</list>




<para id="p1103">
<link id="a1099" target-id="question30">

Back to Question 30

</link>

 

</para>






</section>
<section id="h21047">
<title>
<emphasis id="answer29" effect="bold">

Answer 29

</emphasis>


</title>




<para id="p1104">
The answer for the bitwise 

<emphasis id="strong1012" effect="bold">
<emphasis id="em1050" effect="italics">
and

</emphasis>
</emphasis>
 is:

</para>





<list id="ul1007" list-type="bulleted">

	

<item id="li1023">
11 1 and 1 produces 1

</item>


	

<item id="li1024">
10 1 and 0 produces 0

</item>


	

<item id="li1025">
01 0 and 1 produces 0

</item>


	

<item id="li1026">
00 0 and 0 produces 0 

</item>




</list>




<para id="p1105">
<link id="a1100" target-id="question29">

Back to Question 29

</link>

 

</para>






</section>
<section id="h21048">
<title>
<emphasis id="answer28" effect="bold">

Answer 28

</emphasis>


</title>




<para id="p1106">
True: Bits shifted off the right end are lost. 

</para>





<para id="p1107">
<link id="a1101" target-id="question28">

Back to Question 28

</link>

 

</para>






</section>
<section id="h21049">
<title>
<emphasis id="answer27" effect="bold">

Answer 27

</emphasis>


</title>




<para id="p1108">
False: In Java, the 

<emphasis id="em1051" effect="italics">
signed

</emphasis>
 right shift operation populates the vacated 
bits with the sign bit, while the left shift and the 

<emphasis id="em1052" effect="italics">
unsigned

</emphasis>
 right shift 
populate the vacated bits with zeros. 

</para>





<para id="p1109">
<link id="a1102" target-id="question27">

Back to Question 27

</link>

 

</para>






</section>
<section id="h21050">
<title>
<emphasis id="answer26" effect="bold">

Answer 26

</emphasis>


</title>




<para id="p1110">
The following table shows the seven bitwise operators supported by Java.

</para>







	

<note id="note1004" type="">


		


			


				

<emphasis id="strong1013" effect="bold">
Bitwise operators

</emphasis>

				

<code id="pre1009" display="block">
Operator    Typical Use         Operation

 &gt;&gt;     OpLeft &gt;&gt; Dist      Shift bits of OpLeft right by
                            Dist bits (signed)
 &lt;&lt;     OpLeft &lt;&lt; Dist      Shift bits of OpLeft left by 
                            Dist bits
 &gt;&gt;&gt;    OpLeft &gt;&gt;&gt; Dist     Shift bits of OpLeft right 
                            by Dist bits (unsigned)
 &amp;      OpLeft &amp; OpRight    Bitwise and of the two 
                            operands
 |      OpLeft | OpRight    Bitwise </code>


				

</note>

			


		



	





<para id="p1111">
<link id="a1103" target-id="question26">

Back to Question 26

</link>

 

</para>









</section>
<section id="h21051">
<title>
<emphasis id="answer25" effect="bold">

Answer 25

</emphasis>


</title>




<para id="p1112">
The bitwise 

<emphasis id="strong1014" effect="bold">
<emphasis id="em1053" effect="italics">
and

</emphasis>
</emphasis>
 operator and the bitwise 

<emphasis id="strong1015" effect="bold">



<emphasis id="em1054" effect="italics">
inclusive or

</emphasis>
</emphasis>
 operator are shown below.

</para>







	

<note id="note1005" type="">


		


			


				

<emphasis id="strong1016" effect="bold">
Two bitwise operators

</emphasis>



<code id="pre1010" display="block">
&amp; bitwise and
| bitwise inclusive or</code>


				

</note>

			


		



	





<para id="p1113">
<link id="a1104" target-id="question25">

Back to Question 25

</link>

 

</para>






</section>
<section id="h21052">
<title>
<emphasis id="answer24" effect="bold">

Answer 24

</emphasis>


</title>




<para id="p1114">
An important characteristic of the behavior of the 

<emphasis id="strong1017" effect="bold">
<emphasis id="em1055" effect="italics">
logical and

</emphasis>
</emphasis>
 
operator and the 

<emphasis id="strong1018" effect="bold">
<emphasis id="em1056" effect="italics">
logical or

</emphasis>
</emphasis>
 operator in Java is that 
the expressions containing them are evaluated from 

<emphasis id="em1057" effect="italics">
left to right.

</emphasis>
 The 
evaluation of the expression is. terminated as soon as the result of evaluating 
the expression can be determined. For example, in the expression given in


<link id="a1105" target-id="question24">

Question 24

</link>

, if the variable 

<emphasis id="strong1019" effect="bold">
a

</emphasis>
 is 
less than the variable 

<emphasis id="strong1020" effect="bold">
b

</emphasis>
, there is no need to evaluate the 
right operand of the 

<emphasis id="strong1021" effect="bold">
||

</emphasis>
 operator to determine the value of the 
entire expression. Therefore, evaluation will terminate as soon as it is 
determined that 

<emphasis id="strong1022" effect="bold">
a

</emphasis>
 is less than 

<emphasis id="strong1023" effect="bold">
b

</emphasis>
. 

</para>





<para id="p1115">
<link id="a1106" target-id="question24">

Back to Question 24

</link>

 

</para>






</section>
<section id="h21053">
<title>
<emphasis id="answer23" effect="bold">

Answer 23

</emphasis>


</title>




<para id="p1116">
The following three 

<emphasis id="em1058" effect="italics">
logical

</emphasis>
 or 

<emphasis id="em1059" effect="italics">
conditional

</emphasis>
 operators are 
supported by Java.

</para>







	

<note id="note1006" type="">


		


			


				

<emphasis id="strong1024" effect="bold">
The logical or conditional operators

</emphasis>

				

<code id="pre1011" display="block">
Operator  Typical Use       Returns true if 
&amp;&amp;        Left &amp;&amp; Right     Left and Right are both true
||        Left || Right     Either Left or Right is true 
!         ! Right           Right is false</code>


				

</note>

			


		



	





<para id="p1117">
<link id="a1107" target-id="question23">

Back to Question 23

</link>

 

</para>






</section>
<section id="h21054">
<title>
<emphasis id="answer22" effect="bold">

Answer 22

</emphasis>


</title>




<para id="p1118">
This program produces the following output: 

</para>







	

<note id="note1007" type="">


		


			


				


				

<code id="pre1012" display="block">
The relational 6&lt;5 is false
The relational 6&gt;5 is true</code>


				

</note>

			


		



	





<para id="p1119">
<link id="a1108" target-id="question22">

Back to Question 22

</link>

 

</para>






</section>
<section id="h21055">
<title>
<emphasis id="answer21" effect="bold">

Answer 21

</emphasis>


</title>




<para id="p1120">
Java supports the following set of 

<emphasis id="em1060" effect="italics">
relational 

</emphasis>
operators:

</para>







	

<note id="note1008" type="">


		


			


				

<emphasis id="strong1025" effect="bold">
Relational operators

</emphasis>

				

<code id="pre1013" display="block">
Operator    Returns true if   
   &gt;        Left operand is greater than right operand 
   &gt;=       Left operand is greater than or equal 
            to right operand
   &lt;        Left operand is less than right operand  
   &lt;=       Left operand is less than or equal 
            to right operand
   ==       Left operand is equal to right operand   
   !=       Left operand is not equal to right operand</code>


				

</note>

			


		



	





<para id="p1121">
<link id="a1109" target-id="question21">

Back to Question 21

</link>

 

</para>






</section>
<section id="h21056">
<title>
<emphasis id="answer20" effect="bold">

Answer 20

</emphasis>


</title>




<para id="p1122">
<emphasis id="em1061" effect="italics">
Relational

</emphasis>
 operators return the 

<emphasis id="strong1026" effect="bold">
boolean

</emphasis>
 type in Java. 

</para>





<para id="p1123">
<link id="a1110" target-id="question20">

Back to Question 20

</link>

 

</para>






</section>
<section id="h21057">
<title>
<emphasis id="answer19" effect="bold">

Answer 19

</emphasis>


</title>




<para id="p1124">
Java supports the following four 

<emphasis id="em1062" effect="italics">
unary

</emphasis>
 arithmetic operators.

</para>







	

<note id="note1009" type="">


		


			


				

<emphasis id="strong1027" effect="bold">
Unary arithmetic operators

</emphasis>

				

<code id="pre1014" display="block">
Operator    Description                              
   +        Indicates a positive value               
   -        Negates, or changes algebraic sign       
   ++       Adds one to the operand, 
            both prefix and postfix
   --       Subtracts one from operand, 
            both prefix and postfix</code>


				

</note>

			


		



	




	
	
	



<para id="p1125">
<link id="a1111" target-id="question19">

Back to Question 19

</link>

 

</para>






</section>
<section id="h21058">
<title>
<emphasis id="answer18" effect="bold">

Answer 18

</emphasis>


</title>




<para id="p1126">
The operator coerces the value of the right operand to a string 
representation for use in the expression only. If the right operand is a 
variable, the value stored in the variable is not modified in any way. 

</para>





<para id="p1127">
<link id="a1112" target-id="question18">

Back to Question 18

</link>

 

</para>






</section>
<section id="h21059">
<title>
<emphasis id="answer17" effect="bold">

Answer 17

</emphasis>


</title>




<para id="p1128">
The plus operator 

<emphasis id="em1063" effect="italics">
(+) 

</emphasis>
is also used to concatenate strings as in the 
following code fragment:

</para>







	

<note id="note1010" type="">


		


			


				

<emphasis id="strong1028" effect="bold">
String concatenation

</emphasis>

				

<code id="pre1015" display="block">
"MyVariable has a value of  " 
     + MyVariable + " in this program."</code>


				

</note>

			


		



	





<para id="p1129">
<link id="a1113" target-id="question17">

Back to Question 17

</link>

 

</para>






</section>
<section id="h21060">
<title>
<emphasis id="answer16" effect="bold">

Answer 16

</emphasis>


</title>




<para id="p1130">
Java support various arithmetic operators on floating point and integer 
numbers. The following table lists five of the 

<emphasis id="em1064" effect="italics">
binary

</emphasis>
 arithmetic 
operators supported by Java.

</para>







	

<note id="note1011" type="">


		


			


				

<emphasis id="strong1029" effect="bold">
Binary arithmetic operators

</emphasis>

				

<code id="pre1016" display="block">
Operator    Description                              
   
   +        Adds its operands                        
   -        Subtracts the right operand from the left
            operand
   *        Multiplies the operands                  
   /        Divides the left operand by the right 
            operand 
   %        Remainder of dividing the left operand by
            the right operand</code>


				

</note>

			


		



	





<para id="p1131">
<link id="a1114" target-id="question16">

Back to Question 16

</link>

 

</para>








</section>
<section id="h21061">
<title>
<emphasis id="answer15" effect="bold">

Answer 15

</emphasis>


</title>




<para id="p1132">
As a result of performing the specified action, an operator can be said to 
return a value 

<emphasis id="em1065" effect="italics">
(or evaluate to a value)

</emphasis>
 of a given type. The type 
depends on the operator and the type of the operands. To 

<emphasis id="em1066" effect="italics">
evaluate to a value

</emphasis>
 
means that after the action is performed, the operator and its operands are 
effectively replaced in the expression by the value that is returned. 

</para>





<para id="p1133">
<link id="a1115" target-id="question15">

Back to Question 15

</link>

 

</para>







</section>
<section id="h21062">
<title>
<emphasis id="answer14" effect="bold">

Answer 14

</emphasis>


</title>




<para id="p1134">
False: 

<emphasis id="em1067" effect="italics">
Binary

</emphasis>
 operators use 

<emphasis id="em1068" effect="italics">
infix

</emphasis>
 notation, which means that 
the operator appears between its operands. 

</para>





<para id="p1135">
<link id="a1116" target-id="question14">

Back to Question 14

</link>

 

</para>







</section>
<section id="h21063">
<title>
<emphasis id="answer13" effect="bold">

Answer 13

</emphasis>


</title>




<para id="p1136">
The output from this Java application follows:

</para>





<list id="ul1008" list-type="bulleted">

	

<item id="li1027">
x = 5


</item>


	

<item id="li1028">
X = 5

</item>


	

<item id="li1029">
x + X++ = 10

</item>


	

<item id="li1030">
X = 6

</item>


	

<item id="li1031">
y = 5

</item>


	

<item id="li1032">
Y = 5

</item>


	

<item id="li1033">
y + ++Y = 11

</item>


	

<item id="li1034">
Y = 6

</item>




</list>




<para id="p1137">
<link id="a1117" target-id="question13">

Back to Question 13

</link>

 

</para>







</section>
<section id="h21064">
<title>
<emphasis id="answer12" effect="bold">

Answer 12

</emphasis>


</title>




<para id="p1138">
The increment operator may be used with both 

<emphasis id="em1069" effect="italics">
prefix

</emphasis>
 and 

<emphasis id="em1070" effect="italics">
postfix

</emphasis>
 
notation. Basically, the increment operator causes the value of the variable to 
which it is applied to be increased by one. 

</para>





<para id="p1139">
With 

<emphasis id="em1071" effect="italics">
prefix 

</emphasis>
notation, the operand appears to the right of the operator


<emphasis id="em1072" effect="italics">
(++X)

</emphasis>
, while with 

<emphasis id="em1073" effect="italics">
postfix

</emphasis>
 notation, the operand appears to the 
left of the operator 

<emphasis id="em1074" effect="italics">
(X++)

</emphasis>
. 

</para>





<para id="p1140">
The difference in behavior has to do with the point in the sequence of 
operations that the increment actually occurs. 

</para>





<para id="p1141">
With the 

<emphasis id="em1075" effect="italics">
prefix

</emphasis>
 version, the variable is incremented before it is used 
to evaluate the larger overall expression in which it appears. With the 

<emphasis id="em1076" effect="italics">

postfix

</emphasis>
 version, the 
variable is used to evaluate the larger overall expression and then the variable 
is incremented. 

</para>





<para id="p1142">
<link id="a1118" target-id="question12">

Back to Question 12

</link>

 

</para>






</section>
<section id="h21065">
<title>
<emphasis id="answer11" effect="bold">

Answer 11

</emphasis>


</title>




<para id="p1143">
The symbol for the increment operator is two plus signs with no space between 
them 

<emphasis id="em1077" effect="italics">
(++).

</emphasis>
 

</para>





<para id="p1144">
<link id="a1119" target-id="question11">

Back to Question 11

</link>

 

</para>







</section>
<section id="h21066">
<title>
<emphasis id="answer10" effect="bold">

Answer 10

</emphasis>


</title>




<para id="p1145">
False: The increment operator is a 

<emphasis id="em1078" effect="italics">
unary

</emphasis>
 operator. 

</para>





<para id="p1146">
<link id="a1120" target-id="question10">

Back to Question 10

</link>

 

</para>








</section>
<section id="h21067">
<title>
<emphasis id="answer09" effect="bold">

Answer 9

</emphasis>

 

</title>




<para id="p1147">
The cast operator is used to purposely convert from one type to another. 

</para>





<para id="p1148">
<link id="a1121" target-id="question09">

Back to Question 9

</link>

 

</para>





</section>
<section id="h21068">
<title>
<emphasis id="answer08" effect="bold">

Answer 8

</emphasis>

 

</title>




<para id="p1149">
The plus sign 

<emphasis id="em1079" effect="italics">
(+)

</emphasis>
 is automatically overloaded in Java. The plus sign 
can be used to perform arithmetic addition. It can also be used to concatenate 
strings. However, the plus sign does more than concatenate strings. It also 
performs a conversion to 

<emphasis id="strong1030" effect="bold">
String

</emphasis>
 type. When the plus sign is used to concatenate 
strings and one operand is a string, the other operand is automatically 
converted to a character string before being concatenated with the existing 
string.

</para>





<para id="p1150">
<link id="a1122" target-id="question08">

Back to Question 8

</link>

 

</para>





</section>
<section id="h21069">
<title>
<emphasis id="answer07" effect="bold">

Answer 7

</emphasis>

 

</title>




<para id="p1151">
The operators listed in order are: 

</para>





<list id="ul1009" list-type="bulleted">

	

<item id="li1035">
= 

</item>


	

<item id="li1036">
!= 

</item>


	

<item id="li1037">
+ 

</item>


	

<item id="li1038">
(char)

</item>




</list>




<para id="p1152">
where the cast operator is being used to cast to the type 

<emphasis id="strong1031" effect="bold">
char

</emphasis>
.

</para>





<para id="p1153">
<link id="a1123" target-id="question07">

Back to Question 7

</link>

 

</para>






</section>
<section id="h21070">
<title>
<emphasis id="answer06" effect="bold">

Answer 6

</emphasis>


</title>




<para id="p1154">
Java does not support operator overloading by programmers.

</para>





<para id="p1155">
<link id="a1124" target-id="question06">

Back to Question 6

</link>

 

</para>







</section>
<section id="h21071">
<title>
<emphasis id="answer05" effect="bold">

Answer 5

</emphasis>


</title>




<para id="p1156">
For those languages that support it 

<emphasis id="em1080" effect="italics">
(such as C++)

</emphasis>
 operator 
overloading means that the programmer can redefine the behavior of an operator 
with respect to objects of a new type defined by that program. 

</para>





<para id="p1157">
<link id="a1125" target-id="question05">

Back to Question 5

</link>

 

</para>





</section>
<section id="h21072">
<title>
<emphasis id="answer04" effect="bold">

Answer 4

</emphasis>

 

</title>




<para id="p1158">
Both. As a 

<emphasis id="em1081" effect="italics">
binary

</emphasis>
 operator, the minus sign causes its right operand 
to be subtracted from its left operand. As a 

<emphasis id="em1082" effect="italics">
unary

</emphasis>
 operator, the minus 
sign causes the algebraic sign of the right operand to be changed. 

</para>





<para id="p1159">
<link id="a1126" target-id="question04">

Back to Question 4

</link>

 

</para>





</section>
<section id="h21073">
<title>
<emphasis id="answer03" effect="bold">

Answer 3

</emphasis>

 

</title>




<para id="p1160">
An operator that operates on two operands is called a 

<emphasis id="em1083" effect="italics">
binary

</emphasis>
 
operator. 

</para>





<para id="p1161">
<link id="a1127" target-id="question03">

Back to Question 3

</link>

 

</para>





</section>
<section id="h21074">
<title>
<emphasis id="answer02" effect="bold">

Answer 2

</emphasis>


</title>




<para id="p1162">
An operator that operates on only one operand is called a 

<emphasis id="em1084" effect="italics">
unary

</emphasis>
 
operator. 

</para>





<para id="p1163">
<link id="a1128" target-id="question02">

Back to Question 2

</link>

 

</para>







</section>
<section id="h21075">
<title>
<emphasis id="answer01" effect="bold">

Answer 1

</emphasis>

 

</title>




<para id="p1164">
An operator performs an action on one or two operands. 

</para>





<para id="p1165">
<link id="a1129" target-id="question01">

Back to Question 1

</link>

 

</para>






</section>
</section>
<section id="h11005">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>




<para id="p1166">
This section contains a variety of miscellaneous information. 

</para>





	

<note id="note1012" type="">


		


			

<emphasis id="strong1032" effect="bold">
Housekeeping material

</emphasis>

			

<list id="ul1010" list-type="bulleted">

				

<item id="li1039">
Module name: Jb0210r Review: Operators

</item>


				

<item id="li1040">
File: Jb0210r.htm 

</item>


				

<item id="li1041">
Originally published: 1997

</item>


				

<item id="li1042">
Published at cnx.org: 11/23/12

</item>


			

</list>


			

</note>

		








	

<note id="note1013" type="">


		


			

<emphasis id="strong1033" effect="bold">
Disclaimers:

</emphasis>
<para id="p1167">
<emphasis id="strong1034" effect="bold">
Financial

</emphasis>
: 
			Although the Connexions site makes it possible for you to download a 
			PDF file for this module at no charge, and also makes it possible 
			for you to purchase a pre-printed version of the PDF file, you 
			should be aware that some of the HTML elements in this module may 
			not translate well into PDF.

</para>



			

<para id="p1168">
I also want you to know that, I receive no financial compensation 
			from the Connexions website even if you purchase the PDF version of 
			the module.

</para>



			

<para id="p1169">
In the past, unknown individuals have copied my modules from 
			cnx.org, converted them to Kindle books, and placed them for sale on 
			Amazon.com showing me as the author. I neither receive compensation 
			for those sales nor do I know who does receive compensation. If you 
			purchase such a book, please be aware that it is a copy of a module 
			that is freely available on cnx.org and that it was made and 
			published without my prior knowledge.

</para>



			

<para id="p1170">
<emphasis id="strong1035" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer 
			Information Technology at Austin Community College in Austin, TX.
			

</para>



			

</note>

		









<para id="p1171">
-end- 

</para>







</section>
</content>




</document>