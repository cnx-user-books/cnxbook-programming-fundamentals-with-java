<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Jb0120: Java OOP: A Gentle Introduction to Java Programming</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m45138</md:content-id>
  <md:title>Jb0120: Java OOP: A Gentle Introduction to Java Programming</md:title>
  <md:abstract>This module provides a gentle introduction to Java programming.</md:abstract>
  <md:uuid>b29c83a5-42de-4ff1-9cdf-edc51c270ccf</md:uuid>
</metadata>

<content>






<quote id="blockquote1000" display="block">



<para id="p1000">
Revised: Sun Mar 27 19:13:53 CDT 2016

</para>




<para id="p1001">
<note id="note1000" type="">













<para id="p1002">
This Page is included in the following Books:

</para>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" url="http://cnx.org/contents/EHRr6hjR:pDHzTeQb">

Programming Fundamentals with Java

</link>


</item>


	

<item id="li1001">
<link id="a1001" url="http://cnx.org/contents/-2RmHFs_:kFS-maG_">

Object-Oriented Programming (OOP) with Java 
	

</link>

 

</item>




</list>




</note>




</para>




</quote>












<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1001" list-type="bulleted">

	

<item id="li1002">
<link id="a1002" target-id="Preface">

Preface

</link>


<list id="ul1002" list-type="bulleted">

		

<item id="li1003">
<link id="a1003" target-id="General">

General

</link>


</item>


		

<item id="li1004">
<link id="a1004" target-id="Prerequisites">

Prerequisites

</link>


</item>


		

<item id="li1005">
<link id="a1005" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1003" list-type="bulleted">

			

<item id="li1006">
<link id="a1006" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1007">
<link id="a1007" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1008">
<link id="a1008" target-id="Discussion">

Discussion and sample code

</link>


<list id="ul1004" list-type="bulleted">

		

<item id="li1009">
<link id="a1009" target-id="Introduction">

Introduction

</link>


</item>


		

<item id="li1010">
<link id="a1010" target-id="Compartments">

Compartments

</link>


</item>


		

<item id="li1011">
<link id="a1011" target-id="Checkout_counter_example">

Checkout counter example

</link>


</item>


		

<item id="li1012">
<link id="a1012" target-id="Sample_program">

Sample program

</link>


</item>


	

</list>


	

</item>


	

<item id="li1013">
<link id="a1013" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1014">
<link id="a1014" target-id="Miscellaneous">

Miscellaneous

</link>


</item>




</list>





</section>
<section id="h11001">
<title>
 

<emphasis id="Preface" effect="bold">


</emphasis>

Preface

</title>





<section id="h21000">
<title>
 

<emphasis id="General" effect="bold">

General

</emphasis>


</title>









<para id="p1003">
This module is part of a collection of modules designed to help you learn 
to program computers. 

</para>





<para id="p1004">
It provides a gentle introduction to Java programming.

</para>





</section>
<section id="h21001">
<title>
<emphasis id="Prerequisites" effect="bold">

Prerequisites

</emphasis>


</title>




<para id="p1005">
In addition to an Internet connection and a browser, you will need the 
following tools 

<emphasis id="em1000" effect="italics">
(as a minimum) 

</emphasis>
to work through the exercises in these 
modules:

</para>





<list id="ul1005" list-type="bulleted">

	

<item id="li1015">
The Sun/Oracle Java Development Kit (JDK) 

<emphasis id="em1001" effect="italics">
(See
	

<link id="a1015" url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">


	http://www.oracle.com/technetwork/java/javase/downloads/index.html

</link>

)

</emphasis>
</item>


	

<item id="li1016">
Documentation for the Sun/Oracle Java Development Kit (JDK) 

<emphasis id="em1002" effect="italics">
(See
	

<link id="a1016" url="http://download.oracle.com/javase/7/docs/api/">


	http://download.oracle.com/javase/7/docs/api/

</link>

)

</emphasis>
</item>


	

<item id="li1017">
A simple IDE or text editor for use in writing Java code.

</item>




</list>




<para id="p1006">
The minimum prerequisites for understanding the material in these modules 
include:

</para>





<list id="ul1006" list-type="bulleted">

	

<item id="li1018">
An understanding of algebra.

</item>


	

<item id="li1019">
An understanding of all of the material covered in the earlier modules 
	in this collection.

</item>




</list>




</section>
<section id="h21002">
<title>
 

<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>




<para id="p1007">
 I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the Figures 
and Listings while you are reading about them.

</para>





<section id="h31000">
<title>
 

<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>




<list id="ul1007" list-type="bulleted">

	

<item id="li1020">
<link id="a1017" target-id="Figure_1">

Figure 1

</link>

. A checkout counter algorithm.

</item>




</list>




</section>
<section id="h31001">
<title>
 

<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1008" list-type="bulleted">

	

<item id="li1021">
<link id="a1018" target-id="Listing_1">

Listing 1

</link>

. Program named Memory01.

</item>


	

<item id="li1022">
<link id="a1019" target-id="Listing_2">

Listing 2

</link>

. Batch file for Memory01.

</item>




</list>




</section>
</section>
</section>
<section id="h11002">
<title>
 

<emphasis id="Discussion" effect="bold">

Discussion and sample code

</emphasis>


</title>




<section id="h21003">
<title>
<emphasis id="Introduction" effect="bold">

Introduction

</emphasis>


</title>




<para id="p1008">
All data is stored in a computer in numeric form. Computer programs do what they do by executing a series of calculations on numeric data. It is the order and 
the pattern of those calculations that distinguishes one computer program from another.



</para>





<para id="p1009">
<emphasis id="strong1000" effect="bold">
Avoiding the detailed work

</emphasis>
 

</para>





<para id="p1010">
Fortunately, when we program using a high-level programming language such as Java, much of the 
detailed work is done for us behind the scenes.

</para>





<para id="p1011">
<emphasis id="strong1001" effect="bold">
Musicians or conductors

</emphasis>
</para>





<para id="p1012">
As programmers, we are more like conductors than musicians. The various parts of the computer represent the musicians. We tell them what to play, and when to play it, and if we do our job well, we produce a solution to a problem. 

</para>





</section>
<section id="h21004">
<title>
<emphasis id="Compartments" effect="bold">

Compartments

</emphasis>


</title>




<para id="p1013">
As the computer program performs its calculations in the correct order, it is often necessary for it to store intermediate results someplace, and then come back and get them to use them in subsequent calculations later. The intermediate results are stored in memory, often referred to as RAM or 


<emphasis id="em1003" effect="italics">
Random Access Memory

</emphasis>
.

</para>





<para id="p1014">
<emphasis id="strong1002" effect="bold">
A mechanical analogy

</emphasis>
</para>





<para id="p1015">
We can think of random access memory as being analogous to a metal rack containing a large number of compartments. The compartments are all the same size and are arranged in a 
column.

Each compartment has a numeric address printed above it. No two compartments have the same numeric address. Each compartment also has a little slot into which you can insert a name or a label for the compartment. No two compartments can have the same name.

</para>





<para id="p1016">
<emphasis id="strong1003" effect="bold">
Joe, the computer program

</emphasis>
</para>





<para id="p1017">
Think of yourself as a computer program. You have the ability to write values on little slips of paper and to put them into the compartments. You also have the ability to read the values written on the little slips of paper and to use those values for some purpose. However, there are two rules that you must observe:

</para>





<list id="ul1009" list-type="bulleted">

	

<item id="li1023">
You may not remove a slip of paper from a compartment without replacing it by another slip of paper on which you have written a value.

</item>


	

<item id="li1024">
You may not put a slip of paper in a compartment without removing the one already there.
	

</item>




</list>




</section>
<section id="h21005">
<title>
<emphasis id="Checkout_counter_example" effect="bold">

Checkout counter example

</emphasis>


</title>




<para id="p1018">
In understanding how you might behave as a human computer program, consider yourself to have a job working at the checkout counter of a small grocery store in the 1930s.

</para>





<para id="p1019">
You have two tools to work with:

    

</para>





<list id="ul1010" list-type="bulleted">

	

<item id="li1025">
A mechanical adding machine
    

</item>


	

<item id="li1026">
The rack of compartments described above

</item>




</list>




<para id="p1020">
<emphasis id="strong1004" effect="bold">
Initialization

</emphasis>
</para>





<para id="p1021">
Each morning, the owner of the grocery store tells you to insert a name in the slot above each compartment and to place a little slip of paper 
with a number written on it inside each compartment. 


<emphasis id="em1004" effect="italics">
(In programming jargon, we would refer to this as initialization.)

</emphasis>
 

</para>





<para id="p1022">
Each of the names on the compartments represents a type of grocery such as

</para>





<list id="ul1011" list-type="bulleted">

	

<item id="li1027">
Beans

</item>


	

<item id="li1028">
Apples

</item>


	

<item id="li1029">
Pears

</item>




</list>




<para id="p1023">
No two compartments can have the same name.

</para>





<para id="p1024">
No compartment is allowed to have more than one slip of paper inside it.

</para>





<para id="p1025">
<emphasis id="strong1005" effect="bold">
The price of a can of beans

</emphasis>
</para>





<para id="p1026">
When you place a new slip of paper in a compartment, you must be careful to remove and destroy the one that was already there.

</para>





<para id="p1027">
Each slip of paper that you insert into a compartment contains the price for the type of grocery identified by the label on the compartment.

</para>





<para id="p1028">
For example, the slip of paper in the compartment labeled 

<emphasis id="strong1006" effect="bold">
Beans

</emphasis>
 may contain the value 15, meaning that 
each can of beans costs 15 cents.

</para>





<para id="p1029">
<emphasis id="strong1007" effect="bold">
The checkout procedure

</emphasis>
</para>





<para id="p1030">
As each customer comes to your checkout counter during the remainder of the day, you execute the following procedure:

</para>





<list id="ul1012" list-type="bulleted">

	

<item id="li1030">
Examine each grocery item to determine its type.

</item>


	

<item id="li1031">
Read the price stored in the compartment corresponding to that type of grocery.

</item>


	

<item id="li1032">
Add that price to that customer's bill using your mechanical adding machine.

</item>




</list>




<para id="p1031">
In programming jargon, we would say that as you process each grocery item for 
the same customer, you are 

<emphasis id="em1005" effect="italics">
looping

</emphasis>
. We would also say that you are executing a 
procedure or an 

<emphasis id="em1006" effect="italics">
algorithm

</emphasis>
.

</para>





<para id="p1032">
When you have processed all of the grocery items for a particular customer, you 
would

</para>





<list id="ul1013" list-type="bulleted">

	

<item id="li1033">
Press the TOTAL key on the adding machine,

</item>


	

<item id="li1034">
Turn the crank, and

</item>


	

<item id="li1035">
Present the customer with the bill.

</item>




</list>




<para id="p1033">
<emphasis id="strong1008" effect="bold">
A schematic representation of the procedure

</emphasis>
</para>





<para id="p1034">
We might represent the procedure in schematic form 
as shown in 

<link id="a1020" target-id="Figure_1">

Figure 1

</link>

.

</para>







<table id="table1000" summary="A table." pgwide="677">
<tgroup cols="1">




<thead id="thead1000">
<row id="tr1000">
<entry id="th1000">



<emphasis id="Figure_1" effect="bold">

Figure 1

</emphasis>

. A checkout counter algorithm.


</entry>
</row>
</thead>




<tbody id="tbody1000">
<row id="tr1001">
<entry id="td1000">



<code id="pre1000" display="block">
For each customer, do the following:

  For each item, do the following:
    a. Identify the type of grocery item
    b. Get the price from the compartment
    c. Add the price to accumulated total
  End loop on grocery items

  Present customer with a bill

End loop on a specific customer</code>




</entry>
</row>
</tbody>


</tgroup>
</table>




	


<para id="p1035">
<emphasis id="strong1009" effect="bold">
Common programming activities

</emphasis>
</para>





<para id="p1036">
This procedure illustrates the three activities commonly believed to be the fundamental activities of any computer program:

</para>





<list id="ul1014" list-type="bulleted">

	

<item id="li1036">
sequence
    

</item>


	

<item id="li1037">
selection
    

</item>


	

<item id="li1038">
loop 

</item>




</list>




<para id="p1037">
<emphasis id="strong1010" effect="bold">
Sequence

</emphasis>
</para>





<para id="p1038">
A sequence of operations is illustrated by the three items labeled a, b, and 
c in  

<link id="a1021" target-id="Figure_1">

Figure 1

</link>

 because they are executed in sequential order. 

</para>





<para id="p1039">
<emphasis id="strong1011" effect="bold">
Selection

</emphasis>
</para>





<para id="p1040">
The process of identifying the type of grocery item is often referred to as 


<emphasis id="em1007" effect="italics">
selection

</emphasis>
. A selection operation is the process of selecting among two or more choices.

</para>





<para id="p1041">
<emphasis id="strong1012" effect="bold">
Loop

</emphasis>
</para>





<para id="p1042">
The process of repetitively examining each grocery item and processing it is commonly referred to as a 


<emphasis id="em1008" effect="italics">
loop

</emphasis>
. 
In the early days of programming, for a programming language named FORTRAN, this was referred to as a


<emphasis id="strong1013" effect="bold">
<emphasis id="em1009" effect="italics">
do loop

</emphasis>
</emphasis>
.



</para>





<para id="p1043">
<emphasis id="strong1014" effect="bold">
An algorithm

</emphasis>
</para>





<para id="p1044">
The entire procedure is often referred to as an 

<emphasis id="em1010" effect="italics">
algorithm

</emphasis>
.

</para>





<para id="p1045">
<emphasis id="strong1015" effect="bold">
Modifying stored data

</emphasis>
</para>





<para id="p1046">
Sometimes during the day, the owner of the grocery store may come to you and say that he is going to increase the price of a can of Beans from 15 cents to 25 cents 
and asks you to take care of the change in price.

</para>





<para id="p1047">
You write 25 on a slip of paper and put it in the compartment labeled Beans, being careful to remove and destroy the slip of paper that was previously in that compartment. For the rest of the day, the new price for 
Beans will be used in your calculations unless the owner 
asks you to change it again.

</para>





<para id="p1048">
<emphasis id="strong1016" effect="bold">
Not a bad analogy

</emphasis>
</para>





<para id="p1049">
This is a pretty good analogy to how random access memory is actually used by a computer program.

</para>





<para id="p1050">
<emphasis id="strong1017" effect="bold">
Names versus addresses

</emphasis>
</para>





<para id="p1051">
As a programmer using a high-level language such as Java, you usually don't have to be concerned about the numeric addresses of the compartments.

</para>





<para id="p1052">
You are able to think about them and refer to them in terms of their names. 


<emphasis id="em1011" effect="italics">
(Names are easier to remember than numeric addresses).

</emphasis>
 However, deep inside the computer, these names are cross-referenced to addresses and at the lowest level, the program works with memory addresses instead of names. 

</para>





<para id="p1053">
<emphasis id="strong1018" effect="bold">
Execute an algorithm

</emphasis>
</para>





<para id="p1054">
A computer program always executes some sort of procedure, which is often 
called an 

<emphasis id="em1012" effect="italics">
algorithm

</emphasis>
. The algorithm may be very simple as described in the checkout counter example described above, or it may be very complex as would be the case for a spreadsheet program. As the program executes its 
algorithm, it uses the random access memory to store and retrieve the data that is needed to execute the 
algorithm. 

</para>





<para id="p1055">
<emphasis id="strong1019" effect="bold">
Why is it called RAM?

</emphasis>
</para>





<para id="p1056">
The reason this kind of memory is called 

<emphasis id="em1013" effect="italics">
RAM

</emphasis>
 or 

<emphasis id="em1014" effect="italics">
random access memory

</emphasis>
 is that it can be accessed in any order. 

</para>





<para id="p1057">
<emphasis id="strong1020" effect="bold">
Sequential memory

</emphasis>
</para>





<para id="p1058">
Some types of memory, such as a magnetic tape, must be accessed in sequential order. This means that to get a piece of data 


<emphasis id="em1015" effect="italics">
(the price of beans, for example)

</emphasis>
 from deep inside the memory, it is necessary to start at the beginning and examine every piece of data until the correct one is found. 

</para>





<para id="p1059">
<emphasis id="strong1021" effect="bold">
Combination random/sequential

</emphasis>
</para>





<para id="p1060">
Other types of memory, such as disks, provide a combination of sequential and random access. For example, the data on a disk is stored in tracks that form concentric circles on the disk. The tracks can be accessed in random order, but the data within a track must be accessed sequentially starting at a specific point on the track.

</para>





<para id="p1061">
Sequential memory isn't very good for use by most computer programs because access to each particular piece of data is quite slow. 

</para>





</section>
<section id="h21006">
<title>
<emphasis id="Sample_program" effect="bold">

Sample program

</emphasis>


</title>




<para id="p1062">
<link id="a1022" target-id="Listing_1">

Listing 1

</link>

 shows a sample Java program that illustrates the use of memory 
for the storage and retrieval of data. 

</para>






<table id="table1001" summary="A table." pgwide="677">
<tgroup cols="1">




<thead id="thead1001">
<row id="tr1002">
<entry id="th1001">



<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. Program named Memory01.


</entry>
</row>
</thead>




<tbody id="tbody1001">
<row id="tr1003">
<entry id="td1001">



<code id="pre1001" display="block">
//File Memory01.java
class Memory01 { 
  public static void main(String[] args){
    int beans;
    beans = 25; 
    System.out.println(beans); 
  }//end main 
}//End Memory01 class</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1063">
<link id="a1023" target-id="Listing_2">

Listing 2

</link>

 shows a batch file that you can use to compile and run this 
program.

</para>





<table id="table1002" summary="A table." pgwide="677">
<tgroup cols="1">




<thead id="thead1002">
<row id="tr1004">
<entry id="th1002">



<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. Batch file for Memory01.

</entry>
</row>
</thead>




<tbody id="tbody1002">
<row id="tr1005">
<entry id="td1002">



<code id="pre1002" display="block">
echo off
cls

del *.class

javac -cp .; Memory01.java
java -cp .; Memory01

pause</code>




</entry>
</row>
</tbody>


</tgroup>
</table>





<para id="p1064">
Using the procedure that you learned in the 

<emphasis id="em1016" effect="italics">



<link id="a1024" url="http://cnx.org/content/m45137/latest/">

Getting Started

</link>


</emphasis>
 module, you 
should be able to compile and execute this program. When you do, the program should 
display 25 on your computer screen. 

</para>





<para id="p1065">
<emphasis id="strong1022" effect="bold">
Variables

</emphasis>
</para>





<para id="p1066">
You will learn in a future lesson that the term 

<emphasis id="em1017" effect="italics">
variable

</emphasis>
 is synonymous with the term 


<emphasis id="em1018" effect="italics">
compartment

</emphasis>
 that I have used for illustration purposes in this lesson. 

</para>





<para id="p1067">
<emphasis id="strong1023" effect="bold">
The important lines of code

</emphasis>
</para>





<para id="p1068">
The use of memory is illustrated by the three lines of code in 

<link id="a1025" target-id="Listing_1">

Listing 1

</link>

 
that begin with 

<emphasis id="strong1024" effect="bold">
int

</emphasis>
, 

<emphasis id="strong1025" effect="bold">
beans

</emphasis>
, and 

<emphasis id="strong1026" effect="bold">
System

</emphasis>
.  
We will ignore the other lines in the program in this module and learn about 
them in future modules.

</para>





<para id="p1069">
<emphasis id="strong1027" effect="bold">
Declaring a variable

</emphasis>
 

</para>





<para id="p1070">
A memory compartment 

<emphasis id="em1019" effect="italics">
(or variable)

</emphasis>
 is set aside and given the name 


<emphasis id="strong1028" effect="bold">
beans

</emphasis>
 by the line that begins with 

<emphasis id="strong1029" effect="bold">
int

</emphasis>
 in 

<link id="a1026" target-id="Listing_1">

Listing 1

</link>

. 

</para>





<para id="p1071">
In programmer jargon, this is referred to as 

<emphasis id="em1020" effect="italics">
declaring a variable

</emphasis>
.  The process of declaring a variable 

</para>





<list id="ul1015" list-type="bulleted">

	

<item id="li1039">
causes memory to be set aside to contain a value, and 

</item>


	

<item id="li1040">
causes that chunk of memory to be given a name.

</item>




</list>




<para id="p1072">
That name can be used later to refer to the value stored in that chunk of memory 
or variable.

</para>





<para id="p1073">
This declaration in 

<link id="a1027" target-id="Listing_1">

Listing 1

</link>

 specifies that any value stored in the variable must be of type


<emphasis id="strong1030" effect="bold">
int

</emphasis>
.  Basically, this means that the value must be an integer. 
Beyond that, don't worry about what the 

<emphasis id="em1021" effect="italics">
type

</emphasis>
 means at this point.  I will 
explain the concept of type in detail in a 
future module.

</para>





<para id="p1074">
<emphasis id="strong1031" effect="bold">
Storing a value in the variable

</emphasis>
</para>





<para id="p1075">
A value of 25 is stored in the variable named 

<emphasis id="strong1032" effect="bold">
beans

</emphasis>
 by the 
line in 

<link id="a1028" target-id="Listing_1">

Listing 1

</link>

 
that begins with the word 

<emphasis id="strong1033" effect="bold">
beans

</emphasis>
.

</para>





<para id="p1076">
In programmer jargon, this is referred to as 

<emphasis id="em1022" effect="italics">
assigning a value to a variable

</emphasis>
.  

</para>





<para id="p1077">
From this point forward, when the code in the program refers to this variable by its name, 

<emphasis id="strong1034" effect="bold">
beans

</emphasis>
, the reference to the variable will be interpreted to mean the value stored there. 

</para>





<para id="p1078">
<emphasis id="strong1035" effect="bold">
Retrieving a value from the variable

</emphasis>
</para>





<para id="p1079">
The line in 

<link id="a1029" target-id="Listing_1">

Listing 1

</link>

 that begins with the word 


<emphasis id="strong1036" effect="bold">
System

</emphasis>
 reads the value stored in the variable named 

<emphasis id="strong1037" effect="bold">
beans

</emphasis>
 by referring to the variable by 
its name.

</para>





<para id="p1080">
This line also causes that value to be displayed on your computer screen.  However, at this point, you 
needn't worry about what causes it to be displayed.  You will learn those details in a 
future module.  Just remember that the reference to the variable by its name,


<emphasis id="strong1038" effect="bold">
beans

</emphasis>
, reads the value stored in the variable. 

</para>





<para id="p1081">
<emphasis id="strong1039" effect="bold">
The remaining details

</emphasis>
</para>





<para id="p1082">
Don't be concerned at this point about the other details in the program.  They are there to make it possible for you to compile and execute the program.  You will learn about them in future 
modules.

</para>






</section>
</section>
<section id="h11003">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>



	

<para id="p1083">
I encourage you to run the program that I presented in this lesson 
	to confirm that you get the same results. Experiment with 
the code, making changes, and observing the results of your changes. Make 
certain that you can explain why your changes behave as they do. 

</para>







</section>
<section id="h11004">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>




<para id="p1084">
This section contains a variety of miscellaneous information.

</para>







<note id="note1001" type="">







<emphasis id="strong1040" effect="bold">
Housekeeping material

</emphasis>



<list id="ul1016" list-type="bulleted">



<item id="li1041">
Module name: Jb0120: Java OOP: A Gentle Introduction to Java Programming

</item>




<item id="li1042">
File: Jb0120.htm


</item>




<item id="li1043">
Published: 11/16/12

</item>




</list>




</note>








<note id="note1002" type="">




<emphasis id="strong1041" effect="bold">
Disclaimers:

</emphasis>
<para id="p1085">
<emphasis id="strong1042" effect="bold">
Financial

</emphasis>
: 
	Although the Connexions site makes it possible for you to download a PDF 
	file for this module at no charge, and also makes it possible for you to 
	purchase a pre-printed version of the PDF file, you should be aware that 
	some of the HTML elements in this module may not translate well into PDF.

</para>



	

<para id="p1086">
I also want you to know that, I receive no financial compensation from 
	the Connexions website even if you purchase the PDF version of the module.

</para>



	

<para id="p1087">
In the past, unknown individuals have copied my modules from cnx.org, 
	converted them to Kindle books, and placed them for sale on Amazon.com 
	showing me as the author. I neither receive compensation for those sales nor 
	do I know who does receive compensation. If you purchase such a book, please 
	be aware that it is a copy of a module that is freely available on cnx.org 
	and that it was made and published without my prior knowledge.

</para>



		

<para id="p1088">
<emphasis id="strong1043" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer 
		Information Technology at Austin Community College in Austin, TX.
		

</para>



	

</note>









<para id="p1089">
-end- 

</para>






</section>
</content>




</document>