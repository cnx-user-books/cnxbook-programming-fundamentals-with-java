<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Jb0240: Java OOP: Arrays and Strings</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m45214</md:content-id>
  <md:title>Jb0240: Java OOP: Arrays and Strings</md:title>
  <md:abstract>This module takes a preliminary look at arrays and strings. More in-depth discussions will be provided in future modules.</md:abstract>
  <md:uuid>2d8c88a0-2bcf-4b65-bdb7-fe0631bf7e1b</md:uuid>
</metadata>

<content>






<para id="p1000">
Revised: Mon Mar 28 16:20:59 CDT 2016

</para>




<para id="p1001">
<emphasis id="em1000" effect="italics">
This page is included in the following Books:

</emphasis>
</para>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">

	

<link id="a1000" url="http://cnx.org/contents/EHRr6hjR:pDHzTeQb">


<emphasis id="em1001" effect="italics">
Programming Fundamentals with Java 
	

</emphasis>
 
	

</link>


</item>


	

<item id="li1001">
<link id="a1001" url="http://cnx.org/contents/-2RmHFs_:kFS-maG_">


<emphasis id="em1002" effect="italics">
Object-Oriented Programming (OOP) with Java 
	

</emphasis>
 
	

</link>

 

</item>




</list>













<section id="h11000">
<title>
Table of Contents

</title>





<list id="ul1001" list-type="bulleted">

	

<item id="li1002">
<link id="a1002" target-id="Preface">

Preface

</link>


	

<list id="ul1002" list-type="bulleted">

		

<item id="li1003">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1003" list-type="bulleted">

			

<item id="li1004">
<link id="a1004" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1005">
<link id="a1005" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1006">
<link id="a1006" target-id="Introduction">

Introduction

</link>


</item>


	

<item id="li1007">
<link id="a1007" target-id="arrays">

Arrays

</link>


</item>


	

<item id="li1008">
<link id="a1008" target-id="arraysofobjects">

Arrays of Objects

</link>


</item>


	

<item id="li1009">
<link id="a1009" target-id="strings">

Strings

</link>


<list id="ul1004" list-type="bulleted">

		

<item id="li1010">
<link id="a1010" target-id="stringconcatenation">

String Concatenation

</link>


</item>


		

<item id="li1011">
<link id="a1011" target-id="arraysofstringreferences">

Arrays of String References

</link>


</item>


	

</list>


	

</item>


	

<item id="li1012">
<link id="a1012" target-id="Run_the_program">

Run the programs

</link>


</item>


	

<item id="li1013">
<link id="a1013" target-id="Looking_ahead">

Looking ahead

</link>


</item>


	

<item id="li1014">
<link id="a1014" target-id="Miscellaneous">

Miscellaneous

</link>


</item>




</list>






	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	

<para id="p1002">
This module takes a preliminary look at arrays and strings. More in-depth 
	discussions will be provided in future modules. For example, you will find a more in-depth discussions of array objects in the following 
modules: 

</para>





<list id="ul1005" list-type="bulleted">

	

<item id="li1015">
<link id="a1015" url="http://cnx.org/content/m44198">

Java OOP: Array Objects, Part 1

</link>


</item>


	

<item id="li1016">
<link id="a1016" url="http://cnx.org/content/m44199">

Java OOP: Array Objects, Part 2

</link>


</item>


	

<item id="li1017">
<link id="a1017" url="http://cnx.org/content/m44200">

Java OOP: Array Objects, Part 3

</link>


</item>




</list>


	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1003">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the Figures 
and Listings while you are reading about them.

</para>



	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1006" list-type="bulleted">

		

<item id="li1018">
<link id="a1018" target-id="Figure_1">

Figure 1

</link>

. Formats for declaring a reference variable for an array object. 

</item>


		

<item id="li1019">
<link id="a1019" target-id="Figure_2">

Figure 2

</link>

. Allocating memory for the array object.

</item>


		

<item id="li1020">
<link id="a1020" target-id="Figure_3">

Figure 3

</link>

. Declaration and instantiation can be separated.

</item>


		

<item id="li1021">
<link id="a1021" target-id="Figure_4">

Figure 4

</link>

. General syntax for combining declaration and instantiation.

</item>


		

<item id="li1022">
<link id="a1022" target-id="Figure_5">

Figure 5

</link>

. An example of array indexing syntax. 

</item>


		

<item id="li1023">
<link id="a1023" target-id="Figure_6">

Figure 6

</link>

. The use of the length property in the conditional clause of a for loop.

</item>


		

<item id="li1024">
<link id="a1024" target-id="Figure_7">

Figure 7

</link>

. A string literal. 

</item>


		

<item id="li1025">
<link id="a1025" target-id="Figure_8">

Figure 8

</link>

. String concatenation. 

</item>


		

<item id="li1026">
<link id="a1026" target-id="Figure_9">

Figure 9

</link>

. Declaring and instantiating a String array. 

</item>


		

<item id="li1027">
<link id="a1027" target-id="Figure_10">

Figure 10

</link>

. Allocating memory to contain the String objects.

</item>



	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1007" list-type="bulleted">

		

<item id="li1028">
<link id="a1028" target-id="Listing_1">

Listing 1

</link>

. The program named array01. 

</item>


		

<item id="li1029">
<link id="a1029" target-id="Listing_2">

Listing 2

</link>

. The program named array02.

</item>


		

<item id="li1030">
<link id="a1030" target-id="Listing_3">

Listing 3

</link>

. The program named array03. 

</item>


	

</list>









</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Introduction" effect="bold">

Introduction

</emphasis>


</title>




<para id="p1004">
<emphasis id="strong1000" effect="bold">
The first step

</emphasis>
</para>





<para id="p1005">
The first step in learning to use a new programming language 
is usually to learn the foundation concepts such as variables, types, 
expressions, flow-of-control, arrays, strings, etc. This module concentrates on 
arrays and strings.

</para>





<para id="p1006">
<emphasis id="strong1001" effect="bold">
Array and String types

</emphasis>
</para>





<para id="p1007">
Java provides a type for both arrays and strings from which 
objects of the specific type can be instantiated. Once instantiated, the methods 
belonging to those types can be called by way of the object. 

</para>










</section>
<section id="h11003">
<title>
<emphasis id="arrays" effect="bold">


</emphasis>

Arrays

</title>






<para id="p1008">
<emphasis id="strong1002" effect="bold">
Arrays and Strings

</emphasis>
 

</para>





<para id="p1009">
Java has a true array type and a true 

<emphasis id="strong1003" effect="bold">
String

</emphasis>
 type 
with protective features to prevent your program from writing outside the memory 
bounds of the array object or the 

<emphasis id="strong1004" effect="bold">
String

</emphasis>
 object. Arrays and strings are true objects. 

</para>






<para id="p1010">
<emphasis id="strong1005" effect="bold">
Declaring an array

</emphasis>
</para>





<para id="p1011">
You must declare an array before you can use it. 

<emphasis id="em1003" effect="italics">
(More properly, you must 
declare a reference variable to hold a reference to the array object.)

</emphasis>
 In declaring 
the array, you must provide two important pieces of information: 

</para>






<list id="ul1008" list-type="bulleted">



<item id="li1031">
the name of a variable to hold a reference to the array object

</item>




<item id="li1032">
the type of data to be stored in the elements of the array object

</item>


</list>





<para id="p1012">
<emphasis id="strong1006" effect="bold">
Different declaration formats

</emphasis>
</para>





<para id="p1013">
A reference variable capable of holding a reference to an array object can be 
declared using either format shown in 

<link id="a1031" target-id="Figure_1">

Figure 1

</link>

. 

<emphasis id="em1004" effect="italics">
(I 
personally prefer the first option because I believe it is more indicative of 
the purpose of the declaration. However, both options produce the same result -- 
a reference variable capable of storing a reference to an array object.)

</emphasis>
</para>




	

<table id="table1000" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Figure_1" effect="bold">

Figure 1

</emphasis>

. Formats for declaring a 
				reference variable for an array object.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">



<code id="pre1000" display="block">
int[] myArray;
int myArray[];
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>





<para id="p1014">
<emphasis id="strong1007" effect="bold">
Declaration does not allocate memory

</emphasis>
</para>





<para id="p1015">
As with other objects, the declaration of the reference variable does not 
allocate memory to contain the array data. Rather it simply 
allocates memory to contain a reference to the array. 

</para>





<para id="p1016">
<emphasis id="strong1008" effect="bold">
Allocating memory for the array object

</emphasis>
</para>





<para id="p1017">
Memory to contain the array object must be allocated from dynamic memory using 
statements such as those shown in 

<link id="a1032" target-id="Figure_2">

Figure 2

</link>

.

</para>








	

<table id="table1001" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Figure_2" effect="bold">

Figure 2

</emphasis>

. Allocating memory for the array object.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">



<code id="pre1001" display="block">
int[] myArrayX = new int[15];
int myArrayY[] = new int[25];

int[] myArrayZ = {3,4,5};
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>





<para id="p1018">
The statements in 

<link id="a1033" target-id="Figure_2">

Figure 2

</link>

 simultaneously declare the 
reference variable and cause 
memory to be allocated to contain the array. 

</para>





<para id="p1019">
Also note that the last statement in 

<link id="a1034" target-id="Figure_2">

Figure 2

</link>

 is 
different from the first two statements. This syntax not only sets aside the 
memory for the array object, the elements in the array are initialized by 
evaluating the expressions shown in the coma-separated list inside the curly 
brackets.

</para>





<para id="p1020">
On the other hand, the array elements in the first two statements in 

<link id="a1035" target-id="Figure_2">

Figure 2

</link>

 
are automatically initialized with the default value for the type.

</para>





<para id="p1021">
<emphasis id="strong1009" effect="bold">
Declaration and allocation can be separated

</emphasis>
</para>





<para id="p1022">
It is not necessary to combine these two 
processes. You can execute one statement to declare the reference variable and another 
statement to cause the array object to be instantiated some time later in the 
program as shown in 

<link id="a1036" target-id="Figure_3">


Figure 3

</link>

. 

</para>




	

<table id="table1002" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Figure_3" effect="bold">

Figure 3

</emphasis>

. 

<emphasis id="strong1010" effect="bold">
Declaration and 
				instantiation 
				can be separated.

</emphasis>
</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">



<code id="pre1002" display="block">
int[] myArray;
. . .
myArray = new int[25];
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>




<para id="p1023">
Causing memory to be set aside to contain the array object is commonly referred 
to as instantiating the array object 

<emphasis id="em1005" effect="italics">
(creating an instance of the array 
object)

</emphasis>
. 

</para>





<para id="p1024">
If you prefer to declare the reference variable and instantiate the array 
object at 
different points in your program, you can use the syntax shown in


<link id="a1037" target-id="Figure_3">

Figure 3

</link>

. This pattern 
is very similar to the declaration and instantiation of all objects. 

</para>






<para id="p1025">
<emphasis id="strong1011" effect="bold">
General syntax for combining declaration and 
instantiation

</emphasis>
</para>





<para id="p1026">
The general syntax for declaring and instantiating an array object is shown in 

<link id="a1038" target-id="Figure_4">

Figure 4

</link>

. 

</para>








	

<table id="table1003" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Figure_4" effect="bold">

Figure 4

</emphasis>

. General syntax for combining declaration and instantiation.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">



<code id="pre1003" display="block">
typeOfElements[] nameOfRefVariable = 
           new typeOfElements[sizeOfArray]
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>





<para id="p1027">
<emphasis id="strong1012" effect="bold">
Accessing array elements

</emphasis>
</para>





<para id="p1028">
Having instantiated an array object, you can access the elements of 
the array using indexing syntax that is similar to many other programming languages. 
An example is shown in 

<link id="a1039" target-id="Figure_5">

Figure 5

</link>

.

</para>




	

<table id="table1004" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Figure_5" effect="bold">

Figure 5

</emphasis>

. An example of array 
				indexing syntax.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">



<code id="pre1004" display="block">
myArray[5] = 6;

myVar = myArray[5];
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>





<para id="p1029">
<emphasis id="strong1013" effect="bold">
The value of the first index

</emphasis>
</para>





<para id="p1030">
Array indices always begin with 0. 

</para>





<para id="p1031">
<emphasis id="strong1014" effect="bold">
The length property of an array

</emphasis>
</para>





<para id="p1032">
The code fragment in 

<link id="a1040" target-id="Figure_6">

Figure 6

</link>

 illustrates another interesting aspect of 
arrays. 

<emphasis id="em1006" effect="italics">
(Note the use of 

</emphasis>
<emphasis id="strong1015" effect="bold">
<emphasis id="em1007" effect="italics">
length

</emphasis>
</emphasis>
<emphasis id="em1008" effect="italics">
 in the 
conditional clause of the 

<emphasis id="strong1016" effect="bold">
for

</emphasis>
 loop.)

</emphasis>
</para>








	

<table id="table1005" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Figure_6" effect="bold">

Figure 6

</emphasis>

. The use of the length 
				property in the conditional clause of a for loop.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">



<code id="pre1005" display="block">
for(int cnt = 0; cnt &lt; myArray.length; cnt++) 
  myArray[cnt] = cnt;
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>





<para id="p1033">
All array objects have a 

<emphasis id="strong1017" effect="bold">
length

</emphasis>
 property that can be accessed 
to determine the number of elements in the array. 

<emphasis id="em1009" effect="italics">
(The number of elements 
cannot change once the array object is instantiated.)

</emphasis>
</para>





<para id="p1034">
<emphasis id="strong1018" effect="bold">
Types of data that you can store in an array object

</emphasis>
</para>





<para id="p1035">
Array elements can contain any Java data type including primitive values and 
references to ordinary objects or references to other array objects. 

</para>





<para id="p1036">
<emphasis id="strong1019" effect="bold">
Constructing multi-dimensional 
arrays

</emphasis>
</para>





<para id="p1037">
All array objects contains a one-dimensional array structure. You can create 
multi-dimensional arrays by causing the elements in one array object to contain 
references to other array objects. In effect, you can create a tree structure of 
array objects that behaves like a multi-dimensional array.

</para>





<para id="p1038">
<emphasis id="strong1020" effect="bold">
Odd-shaped multi-dimensional arrays

</emphasis>
</para>





<para id="p1039">
The program 

<emphasis id="strong1021" effect="bold">
array01

</emphasis>
 shown in 

<link id="a1041" target-id="Listing_1">

Listing 1

</link>

 illustrates an interesting aspect of Java arrays. Java can produce multi-dimensional arrays that can 
be thought of as an array of arrays. However, the secondary arrays need 
not all be of the same size. 

</para>





<para id="p1040">
In the program shown in 

<link id="a1042" target-id="Listing_1">

Listing 1

</link>

, a two-dimensional array of integers is declared and 
instantiated with the primary size 

<emphasis id="em1010" effect="italics">
(size of the first dimension)

</emphasis>
 being three. 
The sizes of the secondary dimensions 

<emphasis id="em1011" effect="italics">
(sizes of each of the sub-arrays)

</emphasis>
 is 2, 3, 
and 4 respectively. 

</para>





<para id="p1041">
<emphasis id="strong1022" effect="bold">
Can declare the size of secondary 
dimension later

</emphasis>
</para>





<para id="p1042">
When declaring a 

<emphasis id="em1012" effect="italics">
"two-dimensional"

</emphasis>
 array, it is not necessary to 
declare the size of the secondary dimension when the primary array is 
instantiated. 
Declaration of the size of each sub-array can be deferred until later as 
illustrated in this program. 

</para>





<para id="p1043">
<emphasis id="strong1023" effect="bold">
Accessing an array out-of-bounds 

</emphasis>
 

</para>





<para id="p1044">
This program also illustrates the result of attempting to 
access an element that is out-of-bounds. Java protects you from such 
programming errors. 

</para>







<para id="p1045">
<emphasis id="strong1024" effect="bold">
ArrayIndexOutOfBoundsException

</emphasis>
</para>





<para id="p1046">
An exception occurs if you attempt to access out-of-bounds, as shown in the 
program in in 

<link id="a1043" target-id="Listing_1">

Listing 1

</link>

. 

</para>





<para id="p1047">
In this case, the exception was simply allowed to cause the program to 
terminate. The exception could have been caught and processed by an exception 
handler, a concept that will be explored in a future module.

</para>





<para id="p1048">
<emphasis id="strong1025" effect="bold">
The program named array01

</emphasis>
</para>





<para id="p1049">
The entire program is shown in 

<link id="a1044" target-id="Listing_1">

Listing 1

</link>

. The output from 
the program is shown in the comments at the 
top of the listing. 

</para>






<table id="table1006" summary="A table." pgwide="0">
<tgroup cols="1">





<thead id="thead1006">



<row id="tr1012">



<entry id="th1006">



<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

.  The program named 
				array01.


</entry>



</row>



</thead>





<tbody id="tbody1006">



<row id="tr1013">



<entry id="td1006">



<code id="pre1006" display="block">
/*File array01.java Copyright 1997, R.G.Baldwin
Illustrates creation and manipulation of two-dimensional
array with the sub arrays being of different lengths.

Also illustrates detection of exception when an attempt is
made to store a value out of the array bounds.

This program produces the following output:

00
012
0246
Attempt to access array out of bounds
java.lang.ArrayIndexOutOfBoundsException:
     at array01.main(array01.java: 47)

**********************************************************/
class array01 { //define the controlling class
  public static void main(String[] args){ //main method
    //Declare a two-dimensional array with a size of 3 on
    // the primary dimension but with different sizes on
    // the secondary dimension.
    //Secondary size not specified initially
    int[][] myArray = new int[3][];
    myArray[0] = new int[2];//secondary size is 2
    myArray[1] = new int[3];//secondary size is 3
    myArray[2] = new int[4];//secondary size is 4

    //Fill the array with data
    for(int i = 0; i &lt; 3; i++){
      for(int j = 0; j &lt; myArray[i].length; j++){
        myArray[i][j] = i * j;
      }//end inner loop
    }//end outer loop

    //Display data in the array
    for(int i = 0; i &lt; 3; i++){
      for(int j = 0; j &lt; myArray[i].length; j++){
        System.out.print(myArray[i][j]);
      }//end inner loop
      System.out.println();
    }//end outer loop

    //Attempt to access an out-of-bounds array element
    System.out.println(
                  "Attempt to access array out of bounds");
    myArray[4][0] = 7;
    //The above statement produces an ArrayIndexOutOfBounds
    // exception.

  }//end main
}//End array01 class.
</code>




</entry>



</row>



</tbody>





</tgroup>
</table>






<para id="p1050">
<emphasis id="strong1026" effect="bold">
Assigning one array to another array 
-- be careful

</emphasis>
</para>





<para id="p1051">
Java allows you to assign one array to another. You must 
be aware, however, that when you do this, you are simply making another copy 
of the reference to the same data in memory. 

</para>





<para id="p1052">
Then you simply have two references to the same data in memory, which 
is often not a good idea. This is illustrated in the program named 

<emphasis id="strong1027" effect="bold">

array02

</emphasis>
 shown in 

<link id="a1045" target-id="Listing_2">

Listing 2

</link>

.

</para>










<table id="table1007" summary="A table." pgwide="0">
<tgroup cols="1">





<thead id="thead1007">



<row id="tr1014">



<entry id="th1007">



<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. 

<emphasis id="strong1028" effect="bold">
The program named array02

</emphasis>
.


</entry>



</row>



</thead>





<tbody id="tbody1007">



<row id="tr1015">



<entry id="td1007">



<code id="pre1007" display="block">
/*File array02.java Copyright 1997, R.G.Baldwin
Illustrates that when you assign one array to another
array, you end up with two references to the same array.

The output from running this program is:

firstArray contents
0 1 2
secondArray contents
0 1 2
Change a value in firstArray and display both again
firstArray contents
0 10 2
secondArray contents
0 10 2
**********************************************************/
class array02 { //define the controlling class
  int[] firstArray;
  int[] secondArray;

  array02() {//constructor
    firstArray = new int[3];
    for(int cnt = 0; cnt &lt; 3; cnt++) firstArray[cnt] = cnt;

    secondArray = new int[3];
    secondArray = firstArray;
  }//end constructor

  public static void main(String[] args){//main method
    array02 obj = new array02();
    System.out.println( "firstArray contents" );
    for(int cnt = 0; cnt &lt; 3; cnt++)
      System.out.print(obj.firstArray[cnt] + " " );
    System.out.println();

    System.out.println( "secondArray contents" );
    for(int cnt = 0; cnt &lt; 3; cnt++)
      System.out.print(obj.secondArray[cnt] + " " );

    System.out.println();
    System.out.println(
      "Change value in firstArray and display both again");
    obj.firstArray[1] = 10;

    System.out.println( "firstArray contents" );
    for(int cnt = 0; cnt &lt; 3; cnt++)
      System.out.print(obj.firstArray[cnt] + " " );
    System.out.println();

    System.out.println( "secondArray contents" );
    for(int cnt = 0; cnt &lt; 3; cnt++)
      System.out.print(obj.secondArray[cnt] + " " );

    System.out.println();
  }//end main
}//End array02 class. 

</code>




</entry>



</row>



</tbody>





</tgroup>
</table>










</section>
<section id="h11004">
<title>
<emphasis id="arraysofobjects" effect="bold">


</emphasis>

Arrays of 
Objects

</title>




<para id="p1053">
<emphasis id="strong1029" effect="bold">
An array of objects 
really isn't an array of objects

</emphasis>
</para>





<para id="p1054">
There is another subtle issue that you need to come to grips 
with before we leave our discussion of arrays. In particular, when you create an 
array of objects, it really isn't an array of objects. 

</para>





<para id="p1055">
Rather, it is an array of object references 

<emphasis id="em1013" effect="italics">
(or null)

</emphasis>
. When you 
assign primitive values to the elements in an array object, the actual primitive 
values are stored in the elements of the array.

</para>





<para id="p1056">
However, when you assign objects to the elements in an array , the actual objects aren't 
actually stored in the array elements. Rather, the objects are stored 
somewhere else in memory. The elements in the array contain references to 
those objects. 

</para>






<para id="p1057">
<emphasis id="strong1030" effect="bold">
All the elements in an array of 
objects need not be of the same actual type

</emphasis>
</para>





<para id="p1058">
The fact that the array is simply an array of reference 
variables has some interesting ramifications. For example, it isn't necessary that all the elements in the array be of the same type, provided the reference variables are of a type that will allow them to refer to all the different types of objects.

</para>






<para id="p1059">
For example, if you declare the array to contain references of type 

<emphasis id="strong1031" effect="bold">
Object

</emphasis>
, 
those references can refer to any type of object 

<emphasis id="em1014" effect="italics">
(including array objects)

</emphasis>
 because a reference of type 


<emphasis id="strong1032" effect="bold">
Object

</emphasis>
 
can be used to refer to any object. 

</para>





<para id="p1060">
You can do similar things using 

<emphasis id="em1015" effect="italics">
interface

</emphasis>
 types. I will discuss interface 
types in a future module.

</para>





<para id="p1061">
<emphasis id="strong1033" effect="bold">
Often need to downcast to use an 
Object reference

</emphasis>
</para>





<para id="p1062">
If you store all of your references as type 

<emphasis id="strong1034" effect="bold">
Object

</emphasis>
, you will 
often need to downcast the 
references to the true type before you can use them to access the instance 
variables and instance methods of the objects.

</para>





<para id="p1063">
Doing the downcast no great challenge as long as you can decide what type to downcast 
them to. 

</para>





<para id="p1064">
<emphasis id="strong1035" effect="bold">
The Vector class

</emphasis>
</para>





<para id="p1065">
There is a class named 

<emphasis id="strong1036" effect="bold">
Vector

</emphasis>
 that takes 
advantage of this capability. An object of type 

<emphasis id="strong1037" effect="bold">
Vector

</emphasis>
 is a 
self-expanding array of reference variables of type 

<emphasis id="strong1038" effect="bold">
Object

</emphasis>
. You can use 
an object of type 

<emphasis id="strong1039" effect="bold">
Vector

</emphasis>
 to manage a group of objects of any type, either 
all of the same type, or mixed. 

</para>





<para id="p1066">
<emphasis id="em1016" effect="italics">
(Note that you cannot store primitive values in elements of a 
non-primitive or reference type. If you need to do that, you will need to wrap 
your primitive values in an object of a wrapper class as discussed in an earlier 
module.)

</emphasis>
</para>





<para id="p1067">
<emphasis id="strong1040" effect="bold">
A sample program using the Date 
class

</emphasis>
</para>





<para id="p1068">
The sample program, named 

<emphasis id="strong1041" effect="bold">
array03

</emphasis>
 and shown in


<link id="a1046" target-id="Listing_3">

Listing 3

</link>

 isn't quite that complicated. This program 
behaves as follows:

</para>






<list id="ul1009" list-type="bulleted">



<item id="li1033">
Declare a reference variable to an array of type 

<emphasis id="strong1042" effect="bold">
Date

</emphasis>
. 

<emphasis id="em1017" effect="italics">

(The actual type of the variable is Date[].)

</emphasis>
</item>




<item id="li1034">
Instantiate a three-element array of reference variables of type 

<emphasis id="strong1043" effect="bold">
Date

</emphasis>
. 

</item>




<item id="li1035">
Display the contents of the array elements and confirm that they are all 
null as they should be. 

<emphasis id="em1018" effect="italics">
(When created using this syntax, new array elements 
contain the default value, which is null for reference types.)

</emphasis>
</item>




<item id="li1036">
Instantiate three objects of type 

<emphasis id="strong1044" effect="bold">
Date

</emphasis>
 and store the references to 
those objects in the three elements of the array. 

</item>




<item id="li1037">
Access the references from the array and use them to display the contents of 
the individual 

<emphasis id="strong1045" effect="bold">
Date

</emphasis>
 objects. 

</item>


</list>





<para id="p1069">
As you might expect from the name of the class, each object contains 
information about the date.

</para>









<table id="table1008" summary="A table." pgwide="0">
<tgroup cols="1">





<thead id="thead1008">



<row id="tr1016">



<entry id="th1008">



<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. 

<emphasis id="strong1046" effect="bold">
The program named Array03

</emphasis>
.


</entry>



</row>



</thead>





<tbody id="tbody1008">



<row id="tr1017">



<entry id="td1008">



<code id="pre1008" display="block">
/*File array03.java Copyright 1997, R.G.Baldwin

Illustrates use of arrays with objects.

Illustrates that "an array of objects" is not really an
array of objects, but rather is an array of references
to objects.  The objects are not stored in the array,
but rather are stored somewhere else in memory and the
references in the array elements refer to them.

The output from running this program is:

myArrayOfRefs contains
null
null
null

myArrayOfRefs contains
Sat Dec 20 16:56:34 CST 1997
Sat Dec 20 16:56:34 CST 1997
Sat Dec 20 16:56:34 CST 1997
**********************************************************/
import java.util.*;

class array03 { //define the controlling class
  Date[] myArrayOfRefs; //Declare reference to the array

  array03() {//constructor
    //Instantiate the array of three reference variables
    // of type Date.  They will be initialized to null.
    myArrayOfRefs = new Date[3];

    //Display the contents of the array.
    System.out.println( "myArrayOfRefs contains" );    
    for(int cnt = 0; cnt &lt; 3; cnt++)
      System.out.println(this.myArrayOfRefs[cnt]);
    System.out.println();    
    
    //Instantiate three objects and assign references to
    // those three objects to the three reference 
    // variables in the array.
    for(int cnt = 0; cnt &lt; 3; cnt++)
      myArrayOfRefs[cnt] = new Date();

  }//end constructor
  //-----------------------------------------------------//
  
  public static void main(String[] args){//main method
    array03 obj = new array03();
    System.out.println( "myArrayOfRefs contains" );
    for(int cnt = 0; cnt &lt; 3; cnt++)
      System.out.println(obj.myArrayOfRefs[cnt]);
    System.out.println();
  }//end main
}//End array03 class.
</code>





</entry>



</row>



</tbody>





</tgroup>
</table>











</section>
<section id="h11005">
<title>
<emphasis id="strings" effect="bold">


</emphasis>

Strings

</title>




<para id="p1070">
<emphasis id="strong1047" effect="bold">
What is a string?

</emphasis>
</para>





<para id="p1071">
A string is commonly considered to be a sequence of 
characters stored in memory and accessible as a unit. 

</para>






<para id="p1072">
Java implements strings using the 

<emphasis id="strong1048" effect="bold">
String

</emphasis>
 class 
and the 

<emphasis id="strong1049" effect="bold">
StringBuffer

</emphasis>
 class.

</para>





<para id="p1073">
<emphasis id="strong1050" effect="bold">
What is a string literal?

</emphasis>
</para>





<para id="p1074">
Java considers a series of characters surrounded by quotation 
marks as shown in 

<link id="a1047" target-id="Figure_7">

Figure 7

</link>

 to be a string literal. 

</para>









	

<table id="table1009" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1009">

			

<row id="tr1018">

				

<entry id="th1009">
<emphasis id="Figure_7" effect="bold">

Figure 7

</emphasis>

. A string literal.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1009">

			

<row id="tr1019">

				

<entry id="td1009">



<code id="pre1009" display="block">
"This is a string literal in Java."
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>





<para id="p1075">
<emphasis id="strong1051" effect="bold">
This is just an introduction to 
strings

</emphasis>
</para>





<para id="p1076">
A major section of a future module will be devoted to the 
topic of strings, so this discussion will be brief. 

</para>





<para id="p1077">
<emphasis id="strong1052" effect="bold">
String objects cannot be modified

</emphasis>
</para>





<para id="p1078">
<emphasis id="strong1053" effect="bold">
String

</emphasis>
 objects cannot be changed once they have been 
created. 

<emphasis id="em1019" effect="italics">
(They are said to be immutable.)

</emphasis>
 If you have that need, use the 

<emphasis id="strong1054" effect="bold">
StringBuffer

</emphasis>
 class instead. 

</para>





<para id="p1079">
<emphasis id="strong1055" effect="bold">
StringBuffer

</emphasis>
 objects can be used to create and manipulate character 
data as the program executes. 

</para>










<section id="h21001">
<title>
<emphasis id="stringconcatenation" effect="bold">


</emphasis>


String Concatenation

</title>






<para id="p1080">
Java supports string concatenation using the overloaded + operator as shown 
in 

<link id="a1048" target-id="Figure_8">

Figure 8

</link>

.

</para>









	

<table id="table1010" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1010">

			

<row id="tr1020">

				

<entry id="th1010">
<emphasis id="Figure_8" effect="bold">

Figure 8

</emphasis>

. String concatenation.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1010">

			

<row id="tr1021">

				

<entry id="td1010">



<code id="pre1010" display="block">
"My variable has a value of " + myVar
   + " at this point in the program."
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>





<para id="p1081">
<emphasis id="strong1056" effect="bold">
Coercion of an operand to type 
String

</emphasis>
</para>





<para id="p1082">
The overloaded + operator is used to concatenate strings. If either operand 
is type 

<emphasis id="strong1057" effect="bold">
String

</emphasis>
, the other operand is coerced into type 

<emphasis id="strong1058" effect="bold">

String

</emphasis>
 and the two strings are concatenated.

</para>





<para id="p1083">
Therefore, in addition to concatenating the strings, Java also converts 
values of other types, such as 

<emphasis id="strong1059" effect="bold">
myVar

</emphasis>
 in 

<link id="a1049" target-id="Figure_8">


Figure 8

</link>

, to character-string format 
in the process. 

</para>










</section>
<section id="h21002">
<title>
<emphasis id="arraysofstringreferences" effect="bold">


</emphasis>


Arrays of String References

</title>




<para id="p1084">
<emphasis id="strong1060" effect="bold">
Declaring and instantiating a 
String array

</emphasis>
</para>





<para id="p1085">
The statement in 

<link id="a1050" target-id="Figure_9">

Figure 9

</link>

 declares and instantiates an array of 
references to five 

<emphasis id="strong1061" effect="bold">
String

</emphasis>
 objects. 

</para>









	

<table id="table1011" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1011">

			

<row id="tr1022">

				

<entry id="th1011">
<emphasis id="Figure_9" effect="bold">

Figure 9

</emphasis>

. Declaring and instantiating 
				a String array.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1011">

			

<row id="tr1023">

				

<entry id="td1011">



<code id="pre1011" display="block">
String[] myArrayOfStringReferences = new String[5];
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>





<para id="p1086">
<emphasis id="strong1062" effect="bold">
No string data at this point

</emphasis>
</para>





<para id="p1087">
Note however, that this array doesn't contain the actual 


<emphasis id="strong1063" effect="bold">
String

</emphasis>
 objects. Rather, it simply sets aside memory for storage of five references 
of type 

<emphasis id="strong1064" effect="bold">
String

</emphasis>
. 

<emphasis id="em1020" effect="italics">
(The array elements are automatically 
initialized to null.)

</emphasis>
 No memory has been set aside to store the characters that make up 
the individual 

<emphasis id="strong1065" effect="bold">
String

</emphasis>
 objects. You must allocate the memory for the actual 


<emphasis id="strong1066" effect="bold">
String

</emphasis>
 
objects separately using code similar to the code shown in 

<link id="a1051" target-id="Figure_10">


Figure 10

</link>

.

</para>









	

<table id="table1012" summary="A table." pgwide="0">
<tgroup cols="1">


		

<thead id="thead1012">

			

<row id="tr1024">

				

<entry id="th1012">
<emphasis id="Figure_10" effect="bold">

Figure 10

</emphasis>

. Allocating memory to contain the String objects.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1012">

			

<row id="tr1025">

				

<entry id="td1012">



<code id="pre1012" display="block">
myArrayOfStringReferences[0] = new String(
    "This is the first string.");
myArrayOfStringReferences[1] = new String(
    "This is the second string.");
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>





<para id="p1088">
<emphasis id="strong1067" effect="bold">
The new operator is not required for 
String class

</emphasis>
</para>





<para id="p1089">
Although it was used in 

<link id="a1052" target-id="Figure_10">


Figure 10

</link>

, the 

<emphasis id="strong1068" effect="bold">
new

</emphasis>
 operator is not required to instantiate an object of 
type 

<emphasis id="strong1069" effect="bold">
String

</emphasis>
. I will discuss the ability of Java to 
instantiate objects of type 

<emphasis id="strong1070" effect="bold">
String

</emphasis>
 without the requirement to 
use the 

<emphasis id="strong1071" effect="bold">
new

</emphasis>
 operator in a future module. 

</para>





</section>
</section>
<section id="h11006">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the programs

</emphasis>


</title>




<para id="p1090">
I encourage you to copy the code from 

<link id="a1053" target-id="Listing_1">

Listing 1

</link>

,


<link id="a1054" target-id="Listing_2">

Listing 2

</link>

, and 

<link id="a1055" target-id="Listing_3">

Listing 3

</link>

. Compile the code and execute 
it. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do. 

</para>





</section>
<section id="h11007">
<title>
<emphasis id="Looking_ahead" effect="bold">

Looking ahead

</emphasis>


</title>




<para id="p1091">
As you approach the end of this group of 

<emphasis id="em1021" effect="italics">
Programming Fundamentals

</emphasis>
 
modules, you should be preparing yourself for the more challenging ITSE 2321 OOP 
tracks identified below:

</para>





<list id="ul1010" list-type="bulleted">

	

<item id="li1038">
<link id="a1056" url="http://cnx.org/content/m44148">

Java OOP: The Guzdial-Ericson 
	Multimedia Class Library

</link>


</item>


	

<item id="li1039">
<link id="a1057" url="http://cnx.org/content/m44153">

Java OOP: Objects and 
	Encapsulation

</link>


</item>




</list>


	





	

</section>
<section id="h11008">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1092">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1072" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1011" list-type="bulleted">

					

<item id="li1040">
Module name: Jb0240: Java OOP: Arrays and Strings

</item>


					

<item id="li1041">
File: Jb0240.htm


</item>


					

<item id="li1042">
Originally published: 1997

</item>


					

<item id="li1043">
Published at cnx.org: 11/25/12

</item>


				

</list>


				

</note>

			


		



	





	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1073" effect="bold">
Disclaimers:

</emphasis>
<para id="p1093">
<emphasis id="strong1074" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>



				

<para id="p1094">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>



				

<para id="p1095">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>



				

<para id="p1096">
<emphasis id="strong1075" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>



				

</note>

			


		



	



	

<para id="p1097">
-end- 

</para>







</section>
</content>




</document>