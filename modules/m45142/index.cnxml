<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Jb0105: Java OOP: Similarities and Differences between Java and C++</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m45142</md:content-id>
  <md:title>Jb0105: Java OOP: Similarities and Differences between Java and C++</md:title>
  <md:abstract>This Page compares Java and C++ for the benefit of persons having familiarity with C++ and making the transition to Java.</md:abstract>
  <md:uuid>115384e8-9168-478c-99b4-cb8123468d3f</md:uuid>
</metadata>

<content>






<quote id="blockquote1000" display="block">



<para id="p1000">
Revised: Sun Mar 27 11:30:53 CDT 2016

</para>




<para id="p1001">
<note id="note1000" type="">













<para id="p1002">
This Page is included in the following Books:

</para>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" url="http://cnx.org/contents/EHRr6hjR:pDHzTeQb">

Programming Fundamentals with Java

</link>


</item>


	

<item id="li1001">
<link id="a1001" url="http://cnx.org/contents/-2RmHFs_:kFS-maG_">

Object-Oriented Programming (OOP) with Java 
	

</link>

 

</item>




</list>




</note>




</para>




</quote>











<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1001" list-type="bulleted">

	

<item id="li1002">
<link id="a1002" target-id="Preface">

Preface

</link>


	

</item>


	

<item id="li1003">
<link id="a1003" target-id="Similarities_and_differences">

Similarities and differences

</link>


</item>


	

<item id="li1004">
<link id="a1004" target-id="Miscellaneous">

Miscellaneous

</link>


</item>




</list>


	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	

<para id="p1003">
This module, which presents some of the similarities and differences between Java and C++, is provided solely for the benefit of those 
	students who are already familiar with C++ and are making the transition 
	from C++ into Java. 

</para>





<para id="p1004">
If you have some familiarity with C++, you may find the material in 
	this module helpful. If not, simply skip this module and move on to the next 
	module in the collection. 

</para>





<para id="p1005">
In general, students in Prof. Baldwin's Java/OOP 
courses are not expected to have any specific knowledge of C++. 

</para>





<para id="p1006">
This module is intended to be general in nature. Therefore, although a few 
update notes were added prior to publication at cnx.org, no significant effort has 
been made to keep it up to date relative to any particular version of the Java JDK 
or any particular version of C++. Changes have occurred in both Java and 
C++ since the first publication of this document in 1997. Those changes may 
not be reflected in this module.

</para>





</section>
<section id="h11002">
<title>
<emphasis id="Similarities_and_differences" effect="bold">

Similarities and differences

</emphasis>


</title>




<para id="p1007">
This list of similarities and differences is based heavily on 


<link id="a1005" url="http://net.uom.gr/Books/Manuals/langenviron-a4.pdf">

The Java Language Environment, A White Paper

</link>

 by James Gosling and Henry McGilton and


<emphasis id="em1000" effect="italics">
Thinking in Java

</emphasis>
 by Bruce Eckel, which was freely available on the web 
when this document was first published.

</para>





<para id="p1008">
Java does not support 

<emphasis id="strong1000" effect="bold">
typedefs

</emphasis>
, 

<emphasis id="strong1001" effect="bold">
defines

</emphasis>
, or a 


<emphasis id="strong1002" effect="bold">
preprocessor

</emphasis>
. Without a preprocessor, there are no provisions for including header files. 

</para>





<para id="p1009">
Since Java does not have a preprocessor there is no concept of 

<emphasis id="strong1003" effect="bold">
#define

</emphasis>
 macros or 


<emphasis id="em1001" effect="italics">
manifest constants

</emphasis>
. However, the declaration of named constants is supported in Java through use of the 


<emphasis id="strong1004" effect="bold">
final

</emphasis>
 keyword. 

</para>





<para id="p1010">
Java does not support 

<emphasis id="strong1005" effect="bold">
enums

</emphasis>
 but, as mentioned above, does support 


<emphasis id="em1002" effect="italics">
named constants

</emphasis>
. 

<emphasis id="em1003" effect="italics">
(Note: the


<link id="a1006" url="http://docs.oracle.com/javase/tutorial/java/javaOO/enum.html">

enum type

</link>

 
was introduced into Java sometime between the first publication of this document 
and Java version 7.)

</emphasis>
</para>





<para id="p1011">
Java supports 

<emphasis id="em1004" effect="italics">
classes

</emphasis>
, but does not support 

<emphasis id="em1005" effect="italics">
structures

</emphasis>
 or 


<emphasis id="em1006" effect="italics">
unions

</emphasis>
. 

</para>





<para id="p1012">
All stand-alone C++ programs require a function named 

<emphasis id="strong1006" effect="bold">
main

</emphasis>
 and can have numerous other functions, including both stand-alone functions and functions 
that are members of a class. There are no stand-alone functions in Java. Instead, there are only functions that are members of a class, usually called methods. 
However, a Java application 

<emphasis id="em1007" effect="italics">
(not a Java applet) 

</emphasis>
does require a class 
definition containing a 

<emphasis id="strong1007" effect="bold">
main

</emphasis>
 method.

</para>





<para id="p1013">
Global functions and global data are not allowed in Java. However, variables 
that are declared 

<emphasis id="strong1008" effect="bold">
static

</emphasis>
 are shared among all 
objects instantiated from the class in which the 

<emphasis id="strong1009" effect="bold">
static

</emphasis>
 variables are declared.


<emphasis id="em1008" effect="italics">
(Generally, static has a somewhat different meaning in C++ and Java. For 
example, the concept of a static local variable does not exist in Java as it 
does in C++.)

</emphasis>
</para>





<para id="p1014">
All classes in Java ultimately inherit from the class named 

<emphasis id="strong1010" effect="bold">
Object

</emphasis>
. This is significantly different from C++ where it is possible to create inheritance trees that are completely unrelated to one another. 
All Java objects contain the eleven methods that are inherited from the 

<emphasis id="strong1011" effect="bold">

Object

</emphasis>
 class.

</para>





<para id="p1015">
All function or method definitions in Java are contained within a class definition. To a C++ programmer, they may look like inline function definitions, but they aren't. Java doesn't allow the programmer to request that a function be made inline, at least not directly. 

</para>





<para id="p1016">
Both C++ and Java support class 

<emphasis id="em1009" effect="italics">
(static)

</emphasis>
 methods or functions that can be called without the requirement to instantiate an object of the class. 

</para>





<para id="p1017">
The 

<emphasis id="strong1012" effect="bold">
interface

</emphasis>
 keyword in Java is used to create the equivalence of an abstract base class containing only method declarations and constants. No variable data members or method definitions are allowed 
in a Java interface definition. 


<emphasis id="em1010" effect="italics">
(True abstract base classes can also be created in Java.)

</emphasis>
 The interface concept is not supported by C++ 
but can probably be emulated. 

</para>





<para id="p1018">
Java does not support multiple class inheritance. To some extent, the 

<emphasis id="strong1013" effect="bold">
interface

</emphasis>
 feature provides the desirable features of multiple 
class inheritance to a Java program without some of the underlying problems. 

</para>





<para id="p1019">
While Java does not support multiple class inheritance, single inheritance in Java is similar to C++, but the manner in which you implement inheritance differs significantly, especially with respect to the use of constructors in the inheritance chain. 

</para>





<para id="p1020">
In addition to the access modifiers applied to individual members of a class, C++ allows you to provide an additional access 
modifier when inheriting from a class. This latter concept is not supported by Java.



</para>





<para id="p1021">
Java does not support the 

<emphasis id="strong1014" effect="bold">
goto

</emphasis>
 statement 

<emphasis id="em1011" effect="italics">
(but goto is a reserved word)

</emphasis>
. However, it does support labeled 


<emphasis id="strong1015" effect="bold">
break

</emphasis>
 and 

<emphasis id="strong1016" effect="bold">
continue

</emphasis>
 statements, a feature not supported by C++. In certain restricted situations, labeled 


<emphasis id="strong1017" effect="bold">
break

</emphasis>
 and 

<emphasis id="strong1018" effect="bold">
continue

</emphasis>
 statements can be used where a 


<emphasis id="strong1019" effect="bold">
goto

</emphasis>
 statement might otherwise be used. 

</para>





<para id="p1022">
Java does not support 

<emphasis id="strong1020" effect="bold">
operator overloading

</emphasis>
. 

</para>





<para id="p1023">
Java does not support automatic type conversions 

<emphasis id="em1012" effect="italics">
(except where guaranteed safe)

</emphasis>
. 

</para>





<para id="p1024">
Unlike C++, Java has a 

<emphasis id="strong1021" effect="bold">
String

</emphasis>
 type, and objects of this type are immutable 


<emphasis id="em1013" effect="italics">
(cannot be modified)

</emphasis>
. 

<emphasis id="em1014" effect="italics">
(Note, although I'm not certain, I believe 
that the equivalent of a Java String type was introduced into C++ sometime after 
the original publication of this document.)

</emphasis>
</para>





<para id="p1025">
Quoted strings are automatically converted into 

<emphasis id="strong1022" effect="bold">
String

</emphasis>
 objects 
in Java. Java also has a 

<emphasis id="strong1023" effect="bold">
StringBuffer

</emphasis>
 type. Objects of this type can be modified, and a variety of string manipulation methods are provided.



</para>





<para id="p1026">
Unlike C++, Java provides true arrays as first-class objects. There is a length member, which tells you how big the array is. An exception is thrown if you attempt to access an array out of bounds. All arrays are instantiated in dynamic memory and assignment of one array to another is allowed. However, when you make such an assignment, you simply have two references to the same array. Changing the value of an element in the array using one of the references changes the value insofar as both references are concerned.



</para>





<para id="p1027">
Unlike C++, having two "pointers" or references to the same object in dynamic memory is not necessarily a problem 


<emphasis id="em1015" effect="italics">
(but it can result in somewhat confusing results)

</emphasis>
. In Java, dynamic memory is reclaimed automatically, but is not reclaimed until all references to that memory become NULL or cease to exist. Therefore, unlike in C++, the allocated dynamic memory cannot become invalid for as long as it is being referenced by any reference variable. 

</para>





<para id="p1028">
Java does not support 

<emphasis id="strong1024" effect="bold">
pointers

</emphasis>
 

<emphasis id="em1016" effect="italics">
(at least it does not allow you to modify the address contained in a pointer or to perform pointer arithmetic)

</emphasis>
. Much of the need for pointers was eliminated by providing types for arrays and strings. For example, the oft-used C++ declaration 


<emphasis id="strong1025" effect="bold">
char* ptr

</emphasis>
 needed to point to the first character in a C++ null-terminated "string" is not required in Java, because a string is a true object in Java.



</para>





<para id="p1029">
A class definition in Java looks similar to a class definition in C++, but there is no closing semicolon. Also 


<emphasis id="em1017" effect="italics">
forward reference declarations

</emphasis>
 that are sometimes required in C++ are not required in Java. 

</para>





<para id="p1030">
The scope resolution operator (::) required in C++ is not used in Java. The dot is used to construct all fully-qualified references. Also, since there are no pointers, the pointer operator (-&gt;) used in C++ is not required in Java.



</para>





<para id="p1031">
In C++, static data members and functions are called using the name of the class and the name of the static member connected by the scope resolution operator. In Java, the dot is used for this purpose.



</para>





<para id="p1032">
Like C++, Java has primitive types such as 

<emphasis id="strong1026" effect="bold">
int

</emphasis>
, 

<emphasis id="strong1027" effect="bold">
float

</emphasis>
, etc. Unlike C++, the size of each primitive type is the same regardless of the platform. There is no unsigned integer type in Java. Type checking and type requirements are much tighter in Java than in C++. 

</para>





<para id="p1033">
Unlike C++, Java provides a true 

<emphasis id="strong1028" effect="bold">
boolean

</emphasis>
 type. 

<emphasis id="em1018" effect="italics">
(Note, 
the C++ equivalent of the Java boolean type may have been introduced into C++ 
subsequent to the original publication of this document.)

</emphasis>
</para>





<para id="p1034">
Conditional expressions in Java must evaluate to 

<emphasis id="strong1029" effect="bold">
boolean

</emphasis>
 rather than to integer, as is the case in C++. Statements such as 

</para>





<para id="p1035">
<emphasis id="strong1030" effect="bold">
if(x+y)...

</emphasis>
 

</para>





<para id="p1036">
are not allowed in Java because the conditional expression doesn't evaluate to a 


<emphasis id="strong1031" effect="bold">
boolean

</emphasis>
. 

</para>





<para id="p1037">
The 

<emphasis id="strong1032" effect="bold">
char

</emphasis>
 type in C++ is an 8-bit type that maps to the ASCII 


<emphasis id="em1019" effect="italics">
(or extended ASCII)

</emphasis>
 character set. The 

<emphasis id="strong1033" effect="bold">
char

</emphasis>
 type in Java is a 16-bit type and uses the Unicode character set 


<emphasis id="em1020" effect="italics">
(the Unicode values from 0 through 127 match the ASCII character set)

</emphasis>
. For information on the Unicode character set see


<link id="a1007" url="http://www.unicode.org/">

http://www.unicode.org/

</link>

. 

</para>





<para id="p1038">
Unlike C++, the &gt;&gt; operator in Java is a "signed" right bit shift, inserting the sign bit into the vacated bit position. Java adds an operator that inserts zeros into the vacated bit positions.



</para>





<para id="p1039">
C++ allows the instantiation of variables or objects of all types either at 
compile time in static memory or at run time using dynamic memory. However, Java 
requires all variables of primitive types to be instantiated at compile time, 
and requires all objects to be instantiated in dynamic memory at runtime. 
Wrapper classes are provided for all primitive types to allow them to be instantiated as objects in dynamic memory at runtime if needed. 

</para>





<para id="p1040">
C++ requires that classes and functions be declared before they are used. This is not necessary in Java.



</para>





<para id="p1041">
The "namespace" issues prevalent in C++ are handled in Java by including everything in a class, and collecting classes into packages.



</para>





<para id="p1042">
C++ requires that you re-declare static data members outside the class. This is not required in Java.



</para>





<para id="p1043">
In C++, unless you specifically initialize variables of primitive types, they will contain garbage. Although local variables of primitive types can be initialized in the declaration, primitive data members of a class cannot be initialized in the class definition in C++.



</para>





<para id="p1044">
In Java, you can initialize primitive data members in the class definition. You can also initialize them in the constructor. If you fail to initialize them, they will be initialized to zero 


<emphasis id="em1021" effect="italics">
(or equivalent)

</emphasis>
 automatically. 

</para>





<para id="p1045">
Like C++, Java supports constructors that may be overloaded. As in C++, if you fail to provide a constructor, a default constructor will be provided for you. If you provide a constructor, the default constructor is not provided automatically.



</para>





<para id="p1046">
All objects in Java are passed by reference, eliminating the need for the copy constructor used in C++.

    

</para>





<para id="p1047">
<emphasis id="em1022" effect="italics">
(In reality, all parameters are passed by value in Java.  However, passing a copy of a reference variable makes it possible for code in the receiving method to access the object referred to by the variable, and possibly to modify the contents of that object.  However, code in the receiving method cannot cause the original reference variable to refer to a different object.)

</emphasis>
 

</para>





<para id="p1048">
There are no destructors in Java. Unused memory is returned to the operating system by way of a 


<emphasis id="em1023" effect="italics">
garbage collector

</emphasis>
, which runs in a different thread from the main program. This leads to a whole host of subtle and extremely important differences between Java and C++. 

</para>





<para id="p1049">
Like C++, Java allows you to overload functions 

<emphasis id="em1024" effect="italics">
(methods)

</emphasis>
. However, default arguments are not supported by Java. 

</para>





<para id="p1050">
Unlike C++, Java does not support templates. Thus, there are no generic functions or classes.



<emphasis id="em1025" effect="italics">
(Note, generics similar to C++ templates were introduced into Java in 
version 5 subsequent to the original publication of this document.)

</emphasis>
</para>





<para id="p1051">
Unlike C++, several "data structure" classes are contained in the "standard" version of Java. 


<emphasis id="em1026" effect="italics">
(Note, the Standard Template Library was introduced into the C++ world 
subsequent to the original publication of this document.)

</emphasis>
</para>





<para id="p1052">
More specifically, several "data structure" classes are contained in the standard class library that is distributed with the Java Development Kit (JDK). For example, the standard version of Java provides the containers 


<emphasis id="strong1034" effect="bold">
Vector

</emphasis>
 and 

<emphasis id="strong1035" effect="bold">
Hashtable

</emphasis>
 that can be used to contain any object through recognition that any object is an object of type 


<emphasis id="strong1036" effect="bold">
Object

</emphasis>
. However, to use these containers, you must perform the appropriate upcasting and downcasting, which may lead to efficiency problems.



<emphasis id="em1027" effect="italics">
(Note, the upcasting and downcasting requirements were eliminated in 
conjunction with the introduction of "generics" into Java mentioned earlier.)

</emphasis>
</para>





<para id="p1053">
Multithreading is a standard feature of the Java language.



</para>





<para id="p1054">
Although Java uses the same keywords as C++ for access control: 

<emphasis id="strong1037" effect="bold">
private

</emphasis>
, 


<emphasis id="strong1038" effect="bold">
public

</emphasis>
, and 

<emphasis id="strong1039" effect="bold">
protected

</emphasis>
, the interpretation of these keywords is significantly different between Java and C++. 

</para>





<para id="p1055">
There is no 

<emphasis id="strong1040" effect="bold">
virtual

</emphasis>
 keyword in Java. All non-static methods use dynamic binding, so the virtual keyword isn't needed for the same purpose that it is used in C++. 

</para>





<para id="p1056">
Java provides the 

<emphasis id="strong1041" effect="bold">
final

</emphasis>
 keyword that can be used to specify that a method cannot be overridden and that it can be statically bound. 


<emphasis id="em1028" effect="italics">
(The compiler may elect to make it inline in this case.)

</emphasis>
 

</para>





<para id="p1057">
The detailed implementation of the exception handling system in Java is significantly different from that in C++.



</para>





<para id="p1058">
Unlike C++, Java does not support operator overloading. However, the (+) and (+=) operators are automatically overloaded to concatenate strings, and to convert other types to string in the process.



</para>





<para id="p1059">
As in C++, Java applications can call functions written in another language. This is commonly referred to as 


<emphasis id="em1029" effect="italics">
native methods

</emphasis>
. However, applets cannot call native methods. 

</para>





<para id="p1060">
Unlike C++, Java has built-in support for program documentation. Specially written comments can be automatically stripped out using a separate program named 


<emphasis id="strong1042" effect="bold">
javadoc

</emphasis>
 to produce program documentation. 

</para>





<para id="p1061">
Generally Java is more robust than C++ due to the following:

</para>





<list id="ul1002" list-type="bulleted">

	

<item id="li1005">
Object handles 

<emphasis id="em1030" effect="italics">
(references)

</emphasis>
 are automatically initialized to null.

</item>


	

<item id="li1006">
Handles are checked before accessing, and exceptions are thrown in the event of problems.
    

</item>


	

<item id="li1007">
You cannot access an array out of bounds.
    

</item>


	

<item id="li1008">
The potential for memory leaks is prevented 

<emphasis id="em1031" effect="italics">
(or at least greatly 
	reduced)

</emphasis>
 by automatic garbage collection.

</item>




</list>


	

</section>
<section id="h11003">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1062">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1043" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1003" list-type="bulleted">

					

<item id="li1009">
Module name: Jb0105: Java OOP: Similarities and 
					Differences between Java and C++

</item>


					

<item id="li1010">
File: Jb0105.htm


</item>


					

<item id="li1011">
Originally published: 1997

</item>


					

<item id="li1012">
Published at cnx.org: 11/17/12

</item>


				

</list>


				

</note>

			


		



	





	

<note id="note1002" type="">


		


			


				

<emphasis id="strong1044" effect="bold">
Disclaimers:

</emphasis>
<para id="p1063">
<emphasis id="strong1045" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>



				

<para id="p1064">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>



				

<para id="p1065">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>



				

<para id="p1066">
<emphasis id="strong1046" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>



				

</note>

			


		



	





<para id="p1067">
-end- 

</para>







</section>
</content>




</document>